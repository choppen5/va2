/*
 * Project: DDS Project
 * Author : Charles Oppenheimer
 * Date   : May 02 2009 12:19
 * File auto-generated by Database Design Studio V1.09.2
 * Syntax : isql /Uuser /Ppassword /Sserver -i\path\filename.sql
*/
/*
 * Target DBMS: 'MSSQL'
*/
 
 
set nocount      on
set dateformat   dmy
 
/*
 * select the working database
*/
use master
 
go
 
/*
 * create a local variable for storing the current date
*/
declare @dttm varchar(55)
select  @dttm=convert(varchar,getdate(),3)
raiserror('beginning batch build at %s ....',1,1,@dttm) with nowait
 
/*
 * if the database already exists, it will be dropped
*/
if exists (select * from sysdatabases where name='vadmin21')
    drop database vadmin21
 
go
 
checkpoint
 
go
 
/*
 * if SQL 4.2, 6.0 or 6.5 create the new database in the selected devices
 * if version 7.0 create the database using the default size with autogrow
*/
if (charindex('4.2', @@version) > 0 or
    charindex('6.0', @@version) > 0 or
    charindex('6.5', @@version) > 0)
    create database vadmin21
        on master = 3
else
    create database vadmin21
 
go
 
checkpoint
 
go
 
/*
 * select the working database
*/
use vadmin21
 
go
 
/*
 * ensure the database was created successfully
*/
if db_name() = 'vadmin21'
    raiserror('''vadmin21'' database created, and context now in use.',1,1)
else
    raiserror('error in batch file, ''use vadmin21'' failed!  killing the spid now.',22,127) with log
 
go
 
execute sp_dboption 'vadmin21' ,'trunc. log on chkpt.' ,'true'
 
go
 
/*
 * Table               : errorevent
 * Description         : popultated as result of error deff conditions or  - via XML interface or ODBC
 * errorevent_id       : 
 * type                : 
 * event_sub_type      : 
 * event_level         : 
 * event_time          : 
 * event_string        : 
 * status              : 
 * error_defs_id       : 
 * cc_alias            : 
 * sv_name             : 
 * sft_elmnt_id        : 
 * processed           : 
 * reactionfired       : 
 * host                : host where error occured 
 * analysis_rule_id    : 
 * note_rule_id        : 
 * error_def_id        : 
 * notimeout           : 
 * file_path           : 
*/
create table errorevent (
    errorevent_id   int not null,
    type            char(50) null,
    event_sub_type  char(50) null,
    event_level     char(20) null,
    event_time      datetime null,
    event_string    varchar(2000) null,
    status          char(10) null,
    error_defs_id   int null,
    cc_alias        char(50) null,
    sv_name         char(50) null,
    sft_elmnt_id    int null,
    processed       char(1) null,
    reactionfired   char(1) null,
    host            char(50) null,
    analysis_rule_id int null,
    note_rule_id    int null,
    error_def_id    int null,
    notimeout       char(1) null,
    file_path       char(254) null,
constraint pk_errorevent primary key clustered (errorevent_id))
 
go
 
 
/*
 * Table               : notification_rule
 * Description         : rules for monitoring error event table - conditions will be "anded" - will send messages to communication server
 * note_rule_id        : shorted to avaoid trucation 
 * name                : user name for notification rule 
 * message             : not a condition 
 * notify_all          : 
 * incl_ev_string      : 
 * inc_ev_level        : 
 * inc_ev_subtype      : 
 * type                : 
 * status              : 
 * active              : 
 * ev_sft_elmnt_id     : anded foriegn key to application table 
 * ev_event_sub_type   : anded 
 * ev_event_level      : anded 
 * ev_event_time       : anded 
 * ev_event_string     : anded - regexp 
 * ev_type             : 
*/
create table notification_rule (
    note_rule_id    int not null,
    name            char(30) null,
    message         char(245) not null,
    notify_all      char(1) null,
    incl_ev_string  char(1) null,
    inc_ev_level    char(50) null,
    inc_ev_subtype  char(1) null,
    type            char(50) null,
    status          char(10) null,
    active          char(1) null,
    ev_sft_elmnt_id int null,
    ev_event_sub_type char(50) null,
    ev_event_level  int null,
    ev_event_time   char(50) null,
    ev_event_string char(254) null,
    ev_type         char(20) null,
constraint pk_notification_rule primary key clustered (note_rule_id))
 
go
 
 
/*
 * Table               : host
 * Description         : machine specific info
 * host_id             : 
 * hostname            : 
 * ipaddress           : 
 * os                  : 
 * status              : 
 * username            : 
 * password            : 
 * check_interval      : 
 * no_ping             : 
*/
create table host (
    host_id         int not null,
    hostname        char(50) null,
    ipaddress       char(50) null,
    os              char(50) null,
    status          char(20) null,
    username        char(100) null,
    password        char(100) null,
    check_interval  int null,
    no_ping         char(1) null,
constraint pk_host primary key clustered (host_id))
 
go
 
 
/*
 * Table               : schedule
 * Description         : first draft
 * schedule_id         : 
 * schedule_every      : overides all hour minutes specs 
 * monday              : 
 * tuesday             : 
 * wednesday           : 
 * thursday            : 
 * friday              : 
 * saturday            : 
 * sunday              : 
 * every_day           : overides daily columns 
 * hour_start          : 24 
 * minute_start        : 60 
 * hour_end            : 60 
 * minute_end          : 
 * every_hour          : overides hour/minutes 
 * schd_name           : 
 * start_time          : 
 * end_time            : 
*/
create table schedule (
    schedule_id     int not null,
    schedule_every  varchar(1) null,
    monday          varchar(1) null,
    tuesday         varchar(1) null,
    wednesday       varchar(1) null,
    thursday        varchar(1) null,
    friday          varchar(1) null,
    saturday        varchar(1) null,
    sunday          varchar(1) null,
    every_day       varchar(1) null,
    hour_start      varchar(2) null,
    minute_start    varchar(2) null,
    hour_end        varchar(2) null,
    minute_end      varchar(2) null,
    every_hour      varchar(1) null,
    schd_name       varchar(50) null,
    start_time      datetime null,
    end_time        datetime null,
constraint pk_schedule primary key clustered (schedule_id))
 
go
 
 
/*
 * Table               : comunicationserver
 * Description         : 
 * com_server_id       : truncated from comunicationserver_id 
 * smtp_server         : 
 * webserver           : for future use 
 * paging_server       : futureuse 
 * modemnumber         : future use 
 * type                : 
 * active              : 
 * name                : 
*/
create table comunicationserver (
    com_server_id   int not null,
    smtp_server     char(50) null,
    webserver       char(50) null,
    paging_server   char(50) null,
    modemnumber     char(50) null,
    type            char(20) null,
    active          char(1) null,
    name            char(50) null,
constraint pk_comunicationserver primary key clustered (com_server_id))
 
go
 
 
/*
 * Table               : system_msg
 * Description         : 
 * system_msg_id       : 
 * type                : 
 * message             : 
 * host                : 
 * app_server          : 
 * processesed         : 
*/
create table system_msg (
    system_msg_id   int not null,
    type            varchar(50) null,
    message         varchar(50) null,
    host            char(50) null,
    app_server      char(50) null,
    processesed     char(1) null,
constraint pk_system_msg primary key clustered (system_msg_id))
 
go
 
 
/*
 * Table               : analysis_rule
 * Description         : deffinition for a executible system check
 * analysis_rule_id    : 
 * type                : 
 * rule_def            : definition -sql, wmi, perl, etc 
 * error               : error message displayed if rule unexecutible 
 * name                : 
 * sf_error_deff_id    : 
 * active              : 
 * execution_interval  : 
 * description         : 
 * notimeout           : 
 * parent_folder_id    : 
*/
create table analysis_rule (
    analysis_rule_id int not null,
    type            char(10) null,
    rule_def        varchar(4000) null,
    error           char(254) null,
    name            char(100) null,
    sf_error_deff_id int null,
    active          char(1) null,
    execution_interval varchar(10) null,
    description     char(100) null,
    notimeout       char(1) null,
    parent_folder_id int null,
constraint pk_analysis_rule primary key clustered (analysis_rule_id))
 
go
 
 
/*
 * Table               : reaction
 * Description         : deffinition for a executible system check
 * reaction_id         : 
 * type                : 
 * rule_def            : definition -sql, wmi, perl, etc 
 * error               : error message displayed if rule unexecutible 
 * name                : 
 * host_specific       : if true, execute reaction on host of error,otherwise central 
 * active              : 
 * sv_name             : 
*/
create table reaction (
    reaction_id     int not null,
    type            char(10) null,
    rule_def        varchar(2000) null,
    error           char(100) null,
    name            char(20) null,
    host_specific   char(50) null,
    active          char(1) null,
    sv_name         char(50) null,
constraint pk_reaction primary key clustered (reaction_id))
 
go
 
 
/*
 * Table               : collector
 * Description         : script/sql to collect non internal statistics
 * collector_id        : 
 * type                : 
 * rule_def            : definition -sql, wmi, perl, etc 
 * error               : error message displayed if rule unexecutible 
 * name                : 
 * odbc                : 
 * active              : 
 * sft_elmnt_id        : 
 * host_id             : host a collector is associated with 
 * description         : description of the statistic 
 * execution_interval  : 
 * max_records         : 
 * notimeout           : 
 * parent_sft_elmnt_id : 
 * parent_collector_id : 
 * archive_field       : 
 * archive_interval    : 
 * archive_description : reserved for future use 
 * parent_folder_id    : 
 * monitored_comps_id  : 
*/
create table collector (
    collector_id    int not null,
    type            char(10) null,
    rule_def        varchar(4000) null,
    error           varchar(254) null,
    name            char(100) null,
    odbc            char(50) null,
    active          char(1) null,
    sft_elmnt_id    varchar(10) null,
    host_id         varchar(10) null,
    description     char(100) null,
    execution_interval int null,
    max_records     int null,
    notimeout       char(1) null,
    parent_sft_elmnt_id int null,
    parent_collector_id int null,
    archive_field   char(1) null,
    archive_interval char(1) null,
    archive_description char(50) null,
    parent_folder_id int null,
    monitored_comps_id int null,
constraint pk_collector primary key clustered (collector_id))
 
go
 
 
/*
 * Table               : sft_mng_sys
 * Description         : 
 * sft_mng_sys_id      : 
 * name                : 
 * status              : 
 * state               : 
 * type                : 
*/
create table sft_mng_sys (
    sft_mng_sys_id  int not null,
    name            char(50) null,
    status          char(20) null,
    state           char(20) null,
    type            varchar(50) null,
constraint pk_sft_mng_sys primary key clustered (sft_mng_sys_id))
 
go
 
 
/*
 * Table               : sft_error_defs
 * Description         : string errors and messages will be configured per component/appserver
 * error_defs_id       : 
 * ev_type             : 
 * ev_level            : 
 * ev_time             : 
 * search_string       : 
 * ev_sub_type         : 
 * host                : 
 * name                : Name of Error Deffinition 
 * sv_name             : 
 * cc_alias            : 
 * sf_elmnt_id         : 
 * active              : 
 * type                : type of error definition 
*/
create table sft_error_defs (
    error_defs_id   int not null,
    ev_type         char(50) null,
    ev_level        char(50) null,
    ev_time         char(50) null,
    search_string   char(254) null,
    ev_sub_type     char(50) null,
    host            char(254) null,
    name            char(50) null,
    sv_name         char(50) null,
    cc_alias        char(50) null,
    sf_elmnt_id     char(50) null,
    active          char(1) null,
    type            char(10) null,
constraint pk_sft_error_defs primary key clustered (error_defs_id))
 
go
 
 
/*
 * Table               : server_task
 * Description         : related to sft_elment (for all tasks per app server) or components and monitored_comps , (all task per component)
 * server_task_id      : 
 * sv_name             : 
 * cc_alias            : 
 * tk_taskid           : 
 * tk_pid              : 
 * tk_disp_runstate    : 
 * cc_runmode          : 
 * tk_start_time       : 
 * tk_end_time         : 
 * tk_status           : 
 * cg_alias            : 
 * sft_elmnt_id        : 
 * sft_elmnt_comp_id   : 
 * tk_parent_t         : 
 * cc_incarn_no        : 
 * tk_label            : 
 * tk_tasktype         : 
*/
create table server_task (
    server_task_id  int not null,
    sv_name         char(100) null,
    cc_alias        char(100) null,
    tk_taskid       int null,
    tk_pid          int null,
    tk_disp_runstate char(100) null,
    cc_runmode      char(100) null,
    tk_start_time   char(50) null,
    tk_end_time     char(50) null,
    tk_status       char(254) null,
    cg_alias        char(100) null,
    sft_elmnt_id    int null,
    sft_elmnt_comp_id int null,
    tk_parent_t     char(50) null,
    cc_incarn_no    char(50) null,
    tk_label        char(50) null,
    tk_tasktype     char(50) null,
constraint pk_server_task primary key clustered (server_task_id))
 
go
 
 
/*
 * Table               : monitored_comps
 * Description         : represents all components per app server being monitored
 * monitored_comps_id  : 
 * sv_name             : 
 * cp_max_mts          : 
 * cc_name             : use this key to show running components per component deff 
 * ct_alias            : 
 * cg_name             : 
 * cc_runmode          : 
 * cp_disp_run_state   : 
 * cp_num_run          : 
 * cp_max_tas          : 
 * cp_actv_mt          : 
 * cc_alias            : 
 * cp_start_time       : 
 * cp_end_time         : 
 * cp_status           : 
 * sft_elmnt_id        : 
 * sft_elmnt_comp_id   : 
 * cp_startmode        : 
*/
create table monitored_comps (
    monitored_comps_id int not null,
    sv_name         char(50) null,
    cp_max_mts      varchar(10) null,
    cc_name         char(100) null,
    ct_alias        char(100) null,
    cg_name         char(50) null,
    cc_runmode      char(50) null,
    cp_disp_run_state char(50) null,
    cp_num_run      varchar(10) null,
    cp_max_tas      varchar(10) null,
    cp_actv_mt      varchar(10) null,
    cc_alias        char(50) null,
    cp_start_time   char(50) null,
    cp_end_time     char(50) null,
    cp_status       char(50) null,
    sft_elmnt_id    int null,
    sft_elmnt_comp_id char(50) null,
    cp_startmode    char(50) null,
constraint pk_monitored_comps primary key clustered (monitored_comps_id))
 
go
 
 
/*
 * Table               : processes
 * Description         : related to the app server via sft_enlmnt_id, aslo to component or task via cc_name or ct_name,respectively
 * process_id          : 
 * sv_name             : 
 * task_id             : 
 * pid                 : 
 * cc_alias            : 
 * cc_name             : 
 * host                : 
 * state               : 
 * process             : 
 * cpu                 : 
 * cpu_time            : 
 * memory              : 
 * pagefaults          : 
 * virtualmem          : 
 * priority            : 
 * threads             : 
 * sft_elmnt_id        : 
 * sft_elmnt_comp_id   : 
 * kernel_time         : 
 * user_time           : 
*/
create table processes (
    process_id      int not null,
    sv_name         char(50) null,
    task_id         char(10) null,
    pid             varchar(10) null,
    cc_alias        char(50) null,
    cc_name         char(100) null,
    host            char(50) null,
    state           char(50) null,
    process         char(50) null,
    cpu             float(10) null,
    cpu_time        varchar(10) null,
    memory          int null,
    pagefaults      int null,
    virtualmem      int null,
    priority        char(50) null,
    threads         varchar(10) null,
    sft_elmnt_id    varchar(10) null,
    sft_elmnt_comp_id varchar(10) null,
    kernel_time     varchar(10) null,
    user_time       varchar(10) null,
constraint pk_processes primary key clustered (process_id))
 
go
 
 
/*
 * Table               : components
 * Description         : will contain all Siebel default components, plus user definable components
 * components_id       : 
 * description         : 
 * log_analyze         : 
 * log_monitor         : 
 * sft_elmnt_id        : 
 * cc_alias            : 
*/
create table components (
    components_id   int not null,
    description     char(100) null,
    log_analyze     char(1) null,
    log_monitor     char(1) null,
    sft_elmnt_id    int null,
    cc_alias        char(80) not null,
constraint pk_components primary key clustered (components_id))
 
go
 
 
/*
 * Table               : analysis_err
 * Description         : (reserved for future use) If the anlaysis object returns false, the error defined here will be inserted into error event table
 * analysis_err_id     : 
 * evt_type            : 
 * evt_event_sub_type  : 
 * evt_event_level     : 
 * evt_event_time      : 
 * evt_event_string    : 
 * evt_status          : 
 * evt_cc_alias        : 
 * evt_sv_name         : 
 * evt_sft_elmnt_id    : 
 * evt_host            : 
 * name                : 
*/
create table analysis_err (
    analysis_err_id int not null,
    evt_type        char(10) null,
    evt_event_sub_type char(50) null,
    evt_event_level int null,
    evt_event_time  char(50) null,
    evt_event_string char(254) null,
    evt_status      char(50) null,
    evt_cc_alias    char(50) null,
    evt_sv_name     char(50) null,
    evt_sft_elmnt_id int null,
    evt_host        char(254) null,
    name            char(50) null,
constraint pk_analysis_err primary key clustered (analysis_err_id))
 
go
 
 
/*
 * Table               : tableids
 * Description         : 
 * table_name          : 
 * id                  : 
*/
create table tableids (
    table_name      char(50) not null,
    id              int not null,
constraint pk_tableids primary key clustered (table_name))
 
go
 
 
/*
 * Table               : data_source
 * Description         : 
 * data_source_id      : 
 * name                : 
 * username            : 
 * password            : 
 * host                : 
 * alias               : alias name for ODBC 
*/
create table data_source (
    data_source_id  int not null,
    name            char(50) null,
    username        char(50) null,
    password        char(50) null,
    host            char(50) null,
    alias           char(50) not null,
constraint pk_data_source primary key clustered (data_source_id, alias))
 
go
 
 
/*
 * Table               : resonate_ar
 * Description         : Resonate table for Agent Rules
 * resonate_id         : 
 * sft_elmnt_id        : join to parent sft_elment 
 * service             : object manager - such as eaiobjmgr 
 * service_host        : usually an IP address 
 * type                : 
 * rule_number         : list the number of rules for service host combo 
*/
create table resonate_ar (
    resonate_id     int not null,
    sft_elmnt_id    int null,
    service         char(50) null,
    service_host    char(50) null,
    type            char(50) null,
    rule_number     int null,
constraint pk_resonate_ar primary key clustered (resonate_id))
 
go
 
 
/*
 * Table               : sessions
 * Description         : 
 * sessions_id         : 
 * sv_name             : 
 * cc_alias            : 
 * cg_alias            : 
 * tk_taskid           : 
 * tk_pid              : 
 * tk_disp_runstate    : 
 * tk_idle_state       : 
 * tk_ping_tim         : 
 * tk_hung_state       : 
 * om_login            : 
 * om_bussvc           : 
 * om_view             : 
 * om_applet           : 
 * om_buscomp          : 
 * sft_elmnt_id        : 
*/
create table sessions (
    sessions_id     int not null,
    sv_name         char(50) null,
    cc_alias        char(100) null,
    cg_alias        char(100) null,
    tk_taskid       int null,
    tk_pid          int null,
    tk_disp_runstate char(20) null,
    tk_idle_state   char(20) null,
    tk_ping_tim     char(20) null,
    tk_hung_state   char(20) null,
    om_login        char(30) null,
    om_bussvc       char(100) null,
    om_view         char(100) null,
    om_applet       char(100) null,
    om_buscomp      char(100) null,
    sft_elmnt_id    int null,
constraint pk_sessions primary key clustered (sessions_id))
 
go
 
 
/*
 * Table               : folders
 * Description         : 
 * folder_id           : 
 * fl_name             : 
 * parent_id           : 
 * fl_type             : 
*/
create table folders (
    folder_id       int not null,
    fl_name         varchar(254) not null,
    parent_id       int not null,
    fl_type         int not null,
constraint pk_folders primary key clustered (folder_id))
 
go
 
 
/*
 * Table               : administrators
 * Description         : persons with email address 
 * administrators_id   : 
 * first_name          : 
 * last_name           : 
 * password            : 
 * email               : 
 * phone               : 
 * pager               : 
 * default_admin       : 
 * user_name           : 
 * schedule_id         : (Foreign Key
 *                        references SCHEDULE.schedule_id)
*/
create table administrators (
    administrators_id int not null,
    first_name      char(50) null,
    last_name       char(50) null,
    password        char(50) null,
    email           char(70) null,
    phone           char(50) null,
    pager           char(50) null,
    default_admin   char(1) null,
    user_name       char(50) null,
    schedule_id     int null,
constraint pk_administrators primary key clustered (administrators_id),
constraint fk_administrators foreign key (schedule_id)
    references schedule (schedule_id))
 
go
 
 
/*
 * Table               : errorexceptions
 * Description         : ignore errors based on time/date or string
 * errorexceptions_id  : 
 * errorexception      : 
 * time_exemption      : ignore errors before this date 
 * err_type_exept      : 
 * note_rule_id        : shorted to avaoid trucation (Foreign Key
 *                        references NOTIFICATION_RULE.note_rule_id)
*/
create table errorexceptions (
    errorexceptions_id char(10) not null,
    errorexception  char(254) null,
    time_exemption  datetime null,
    err_type_exept  char(10) null,
    note_rule_id    int null,
constraint pk_errorexceptions primary key clustered (errorexceptions_id),
constraint fk_errorexceptions foreign key (note_rule_id)
    references notification_rule (note_rule_id))
 
go
 
 
/*
 * Table               : host_os_stats
 * Description         : machine specific info
 * db_id               : 
 * running_since       : 
 * status              : 
 * memory_consuption   : 
 * cpu_utilization     : 
 * time_stamp          : 
 * host_id             : (Foreign Key
 *                        references HOST.host_id)
*/
create table host_os_stats (
    db_id           char(10) not null,
    running_since   datetime null,
    status          char(10) null,
    memory_consuption char(50) null,
    cpu_utilization char(50) null,
    time_stamp      datetime null,
    host_id         int null,
constraint pk_host_os_stats primary key clustered (db_id),
constraint fk_host_os_stats foreign key (host_id)
    references host (host_id))
 
go
 
 
/*
 * Table               : com_admin
 * Description         : 
 * com_server_id       : truncated from comunicationserver_id (Foreign Key
 *                        references COMUNICATIONSERVER.com_server_id)
 * administrators_id   : (Foreign Key
 *                        references ADMINISTRATORS.administrators_id)
*/
create table com_admin (
    com_server_id   int not null,
    administrators_id int not null,
constraint pk_com_admin primary key clustered (com_server_id, administrators_id),
constraint fk_com_admin1 foreign key (com_server_id)
    references comunicationserver (com_server_id),
constraint fk_com_admin2 foreign key (administrators_id)
    references administrators (administrators_id))
 
go
 
 
/*
 * Table               : stat_vals
 * Description         : values populated as result of stat_defs
 * stat_vals_id        : 
 * val                 : 
 * time_stmp           : 
 * collector_id        : (Foreign Key
 *                        references COLLECTOR.collector_id)
*/
create table stat_vals (
    stat_vals_id    int not null,
    val             float(20) not null,
    time_stmp       datetime not null,
    collector_id    int null,
constraint pk_stat_vals primary key clustered (stat_vals_id),
constraint fk_stat_vals foreign key (collector_id)
    references collector (collector_id))
 
go
 
 
/*
 * Table               : sft_elmnt
 * Description         : 
 * sft_elmnt_id        : 
 * type                : 
 * description         : 
 * name                : 
 * os                  : 
 * host                : 
 * installdir          : 
 * status              : 
 * exe                 : 
 * service_name        : 
 * parent_elmnt_id     : 
 * logdir              : 
 * monitor_service     : 
 * restart_service     : 
 * send_event          : send event on service failure 
 * port                : 
 * mon_interval        : 
 * sft_mng_sys_id      : (Foreign Key
 *                        references SFT_MNG_SYS.sft_mng_sys_id)
*/
create table sft_elmnt (
    sft_elmnt_id    int not null,
    type            char(20) null,
    description     char(50) null,
    name            char(50) null,
    os              char(20) null,
    host            char(50) null,
    installdir      char(254) null,
    status          char(20) null,
    exe             char(50) null,
    service_name    char(50) null,
    parent_elmnt_id int null,
    logdir          char(254) null,
    monitor_service char(1) null,
    restart_service char(1) null,
    send_event      char(1) null,
    port            int null,
    mon_interval    int null,
    sft_mng_sys_id  int null,
constraint pk_sft_elmnt primary key clustered (sft_elmnt_id),
constraint fk_sft_elmnt foreign key (sft_mng_sys_id)
    references sft_mng_sys (sft_mng_sys_id))
 
go
 
 
/*
 * Table               : sft_elmnt_comp
 * Description         : key value description of component
 * sft_elmnt_comp_id   : 
 * type                : 
 * elmnt_key           : 
 * elmnt_value         : 
 * status              : 
 * sft_elmnt_id        : (Foreign Key
 *                        references SFT_ELMNT.sft_elmnt_id)
*/
create table sft_elmnt_comp (
    sft_elmnt_comp_id int not null,
    type            char(20) null,
    elmnt_key       char(50) not null,
    elmnt_value     char(254) not null,
    status          char(20) null,
    sft_elmnt_id    int null,
constraint pk_sft_elmnt_comp primary key clustered (sft_elmnt_comp_id),
constraint fk_sft_elmnt_comp foreign key (sft_elmnt_id)
    references sft_elmnt (sft_elmnt_id))
 
go
 
 
/*
 * Table               : comp_errdef
 * Description         : 
 * components_id       : (Foreign Key
 *                        references COMPONENTS.components_id)
 * error_defs_id       : (Foreign Key
 *                        references SFT_ERROR_DEFS.error_defs_id)
*/
create table comp_errdef (
    components_id   int not null,
    error_defs_id   int not null,
constraint pk_comp_errdef primary key clustered (components_id, error_defs_id),
constraint fk_comp_errdef1 foreign key (components_id)
    references components (components_id),
constraint fk_comp_errdef2 foreign key (error_defs_id)
    references sft_error_defs (error_defs_id))
 
go
 
 
/*
 * Table               : com_srvr_vals
 * Description         : key value description of component
 * com_srvr_vals_id    : 
 * type                : 
 * elmnt_key           : 
 * elmnt_value         : 
 * status              : 
 * com_server_id       : truncated from comunicationserver_id (Foreign Key
 *                        references COMUNICATIONSERVER.com_server_id)
*/
create table com_srvr_vals (
    com_srvr_vals_id int not null,
    type            char(20) null,
    elmnt_key       char(50) not null,
    elmnt_value     char(254) not null,
    status          char(20) null,
    com_server_id   int null,
constraint pk_com_srvr_vals primary key clustered (com_srvr_vals_id),
constraint fk_com_srvr_vals foreign key (com_server_id)
    references comunicationserver (com_server_id))
 
go
 
 
/*
 * Table               : notification_reaction
 * Description         : 
 * note_rule_id        : shorted to avaoid trucation (Foreign Key
 *                        references NOTIFICATION_RULE.note_rule_id)
 * reaction_id         : (Foreign Key
 *                        references REACTION.reaction_id)
*/
create table notification_reaction (
    note_rule_id    int not null,
    reaction_id     int not null,
constraint pk_notification_reaction primary key clustered (note_rule_id, reaction_id),
constraint fk_notification_reaction1 foreign key (note_rule_id)
    references notification_rule (note_rule_id),
constraint fk_notification_reaction2 foreign key (reaction_id)
    references reaction (reaction_id))
 
go
 
 
/*
 * Table               : analysis_errdef
 * Description         : 
 * analysis_rule_id    : (Foreign Key
 *                        references ANALYSIS_RULE.analysis_rule_id)
 * error_defs_id       : (Foreign Key
 *                        references SFT_ERROR_DEFS.error_defs_id)
*/
create table analysis_errdef (
    analysis_rule_id int not null,
    error_defs_id   int not null,
constraint pk_analysis_errdef primary key clustered (analysis_rule_id, error_defs_id),
constraint fk_analysis_errdef1 foreign key (analysis_rule_id)
    references analysis_rule (analysis_rule_id),
constraint fk_analysis_errdef2 foreign key (error_defs_id)
    references sft_error_defs (error_defs_id))
 
go
 
 
/*
 * Table               : sft_err_deff
 * Description         : 
 * sft_elmnt_id        : (Foreign Key
 *                        references SFT_ELMNT.sft_elmnt_id)
 * error_defs_id       : (Foreign Key
 *                        references SFT_ERROR_DEFS.error_defs_id)
*/
create table sft_err_deff (
    sft_elmnt_id    int not null,
    error_defs_id   int not null,
constraint pk_sft_err_deff primary key clustered (sft_elmnt_id, error_defs_id),
constraint fk_sft_err_deff1 foreign key (sft_elmnt_id)
    references sft_elmnt (sft_elmnt_id),
constraint fk_sft_err_deff2 foreign key (error_defs_id)
    references sft_error_defs (error_defs_id))
 
go
 
