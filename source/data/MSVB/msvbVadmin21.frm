'
' Project: DDS Project
' Author : Charles Oppenheimer
' Date   : Jan 26 2004 09:48
' File auto-generated by Database Design Studio V1.09.2
'
'
' Target DBMS: 'MSVB'
'
 
'
' NOTE: Make sure you include the Microsoft DAO Object Library
'       before attempting to compile this form script.  Use the
'       Object Browser, right mouse click in the libraries list
'       select 'References' from the pop-up menu and check the
'       correct Microsoft DAO library in the dialog.
'
VERSION 5.00
Begin VB.Form frmVadmin21
   Caption         =   "DDS Project"
   ClientHeight    =   2310
   ClientLeft      =   60
   ClientTop       =   345
   ClientWidth     =   4680
   LinkTopic       =   "Form1"
   ScaleHeight     =   2310
   ScaleWidth      =   4680
   StartUpPosition =   3  'Windows Default
   Begin VB.CommandButton cmdCreateDB 
      Caption         =   "&Create Database"
      Height          =   375
      Left            =   3000
      TabIndex        =   0
      Top             =   120
      Width           =   1575
   End
   Begin VB.CommandButton cmdLoadData 
      Caption         =   "Load  &Data"
      Height          =   375
      Left            =   3000
      TabIndex        =   1
      Top             =   600
      Width           =   1575
   End
   Begin VB.CommandButton cmdExit 
      Caption         =   "&Exit"
      Height          =   375
      Left            =   3000
      TabIndex        =   2
      Top             =   1080
      Width           =   1575
   End
   Begin VB.TextBox txtStatus 
      Height          =   375
      Left            =   120
      TabIndex        =   3
      Top             =   1680
      Width           =   4395
   End
   Begin VB.Label Label2 
      Caption         =   "Created with Database Design Studio"
      Height          =   255
      Left            =   120
      TabIndex        =   4
      Top             =   120
      Width           =   2655
   End
   Begin VB.Label Label3 
      Caption         =   "Version 1.09.2"
      Height          =   255
      Left            =   120
      TabIndex        =   5
      Top             =   480
      Width           =   2775
   End
   Begin VB.Label Label1 
      Caption         =   "Status:"
      Height          =   255
      Left            =   120
      TabIndex        =   6
      Top             =   1320
      Width           =   2175
   End
End
Attribute VB_Name = "frmVadmin21"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
 
'
' Function : ddsCreateDB 
' Purpose  : create the database
' Returns  : Boolean
'
Function ddsCreateDB() As Boolean
    Dim db         As Database
    Dim strDBName  As String
    Dim strSQL     As String
    Dim strNotNull As String
 
    On Error GoTo onError
 
    frmVadmin21.txtStatus.Text = "Creating Tables..."
 
    strDBName = "d:\vadmin2\source\data\msvb\vadmin21.mdb"
 
    Set db = CreateDatabase(strDBName, dbLangGeneral)
 
'
' Table               : errorevent
' Description         : popultated as result of error deff conditions or  - via XML interface or ODBC
' errorevent_id       : 
' type                : 
' event_sub_type      : 
' event_level         : 
' event_time          : 
' event_string        : 
' status              : 
' error_defs_id       : 
' cc_alias            : 
' sv_name             : 
' sft_elmnt_id        : 
' processed           : 
' reactionfired       : 
' host                : host where error occured 
' analysis_rule_id    : 
' note_rule_id        : 
' error_def_id        : 
' notimeout           : 
'
    strSQL = "create table errorevent ("
    strSQL = strSQL + "errorevent_id   LONG, "
    strSQL = strSQL + "type            TEXT(50), "
    strSQL = strSQL + "event_sub_type  TEXT(50), "
    strSQL = strSQL + "event_level     TEXT(20), "
    strSQL = strSQL + "event_time      DATETIME, "
    strSQL = strSQL + "event_string    TEXT(254), "
    strSQL = strSQL + "status          TEXT(10), "
    strSQL = strSQL + "error_defs_id   LONG, "
    strSQL = strSQL + "cc_alias        TEXT(50), "
    strSQL = strSQL + "sv_name         TEXT(50), "
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "processed       TEXT(1), "
    strSQL = strSQL + "reactionfired   TEXT(1), "
    strSQL = strSQL + "host            TEXT(50), "
    strSQL = strSQL + "analysis_rule_id LONG, "
    strSQL = strSQL + "note_rule_id    LONG, "
    strSQL = strSQL + "error_def_id    LONG, "
    strSQL = strSQL + "notimeout       TEXT(1), "
    strSQL = strSQL + "constraint errorevent1 "
    strSQL = strSQL + "primary key (errorevent_id));"
    db.Execute strSQL
 
'
' Table               : notification_rule
' Description         : rules for monitoring error event table - conditions will be "anded" - will send messages to communication server
' note_rule_id        : shorted to avaoid trucation 
' name                : user name for notification rule 
' message             : not a condition 
' notify_all          : 
' incl_ev_string      : 
' inc_ev_level        : 
' inc_ev_subtype      : 
' type                : 
' status              : 
' active              : 
' ev_sft_elmnt_id     : anded foriegn key to application table 
' ev_event_sub_type   : anded 
' ev_event_level      : anded 
' ev_event_time       : anded 
' ev_event_string     : anded - regexp 
' ev_type             : 
'
    strSQL = "create table notification_rule ("
    strSQL = strSQL + "note_rule_id    LONG, "
    strSQL = strSQL + "name            TEXT(30), "
    strSQL = strSQL + "message         TEXT(245), "
    strSQL = strSQL + "notify_all      TEXT(1), "
    strSQL = strSQL + "incl_ev_string  TEXT(1), "
    strSQL = strSQL + "inc_ev_level    TEXT(50), "
    strSQL = strSQL + "inc_ev_subtype  TEXT(1), "
    strSQL = strSQL + "type            TEXT(50), "
    strSQL = strSQL + "status          TEXT(10), "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "ev_sft_elmnt_id LONG, "
    strSQL = strSQL + "ev_event_sub_type TEXT(50), "
    strSQL = strSQL + "ev_event_level  LONG, "
    strSQL = strSQL + "ev_event_time   TEXT(50), "
    strSQL = strSQL + "ev_event_string TEXT(254), "
    strSQL = strSQL + "ev_type         TEXT(20), "
    strSQL = strSQL + "constraint notification_rule1 "
    strSQL = strSQL + "primary key (note_rule_id));"
    db.Execute strSQL
 
'
' Table               : host
' Description         : machine specific info
' host_id             : 
' hostname            : 
' ipaddress           : 
' os                  : 
' status              : 
' username            : 
' password            : 
' check_interval      : 
'
    strSQL = "create table host ("
    strSQL = strSQL + "host_id         LONG, "
    strSQL = strSQL + "hostname        TEXT(50), "
    strSQL = strSQL + "ipaddress       TEXT(50), "
    strSQL = strSQL + "os              TEXT(50), "
    strSQL = strSQL + "status          TEXT(20), "
    strSQL = strSQL + "username        TEXT(100), "
    strSQL = strSQL + "password        TEXT(100), "
    strSQL = strSQL + "check_interval  LONG, "
    strSQL = strSQL + "constraint host1 "
    strSQL = strSQL + "primary key (host_id));"
    db.Execute strSQL
 
'
' Table               : schedule
' Description         : first draft
' schedule_id         : 
' schedule_every      : overides all hour minutes specs 
' monday              : 
' tuesday             : 
' wednesday           : 
' thursday            : 
' friday              : 
' saturday            : 
' sunday              : 
' every_day           : overides daily columns 
' hour_start          : 24 
' minute_start        : 60 
' hour_end            : 60 
' minute_end          : 
' every_hour          : overides hour/minutes 
' schd_name           : 
' start_time          : 
' end_time            : 
'
    strSQL = "create table schedule ("
    strSQL = strSQL + "schedule_id     LONG, "
    strSQL = strSQL + "schedule_every  LONGTEXT, "
    strSQL = strSQL + "monday          LONGTEXT, "
    strSQL = strSQL + "tuesday         LONGTEXT, "
    strSQL = strSQL + "wednesday       LONGTEXT, "
    strSQL = strSQL + "thursday        LONGTEXT, "
    strSQL = strSQL + "friday          LONGTEXT, "
    strSQL = strSQL + "saturday        LONGTEXT, "
    strSQL = strSQL + "sunday          LONGTEXT, "
    strSQL = strSQL + "every_day       LONGTEXT, "
    strSQL = strSQL + "hour_start      LONGTEXT, "
    strSQL = strSQL + "minute_start    LONGTEXT, "
    strSQL = strSQL + "hour_end        LONGTEXT, "
    strSQL = strSQL + "minute_end      LONGTEXT, "
    strSQL = strSQL + "every_hour      LONGTEXT, "
    strSQL = strSQL + "schd_name       LONGTEXT, "
    strSQL = strSQL + "start_time      DATETIME, "
    strSQL = strSQL + "end_time        DATETIME, "
    strSQL = strSQL + "constraint schedule1 "
    strSQL = strSQL + "primary key (schedule_id));"
    db.Execute strSQL
 
'
' Table               : comunicationserver
' Description         : 
' com_server_id       : truncated from comunicationserver_id 
' smtp_server         : 
' webserver           : for future use 
' paging_server       : futureuse 
' modemnumber         : future use 
' type                : 
' active              : 
' name                : 
'
    strSQL = "create table comunicationserver ("
    strSQL = strSQL + "com_server_id   LONG, "
    strSQL = strSQL + "smtp_server     TEXT(50), "
    strSQL = strSQL + "webserver       TEXT(50), "
    strSQL = strSQL + "paging_server   TEXT(50), "
    strSQL = strSQL + "modemnumber     TEXT(50), "
    strSQL = strSQL + "type            TEXT(20), "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "constraint comunicationserver1 "
    strSQL = strSQL + "primary key (com_server_id));"
    db.Execute strSQL
 
'
' Table               : system_msg
' Description         : 
' system_msg_id       : 
' type                : 
' message             : 
' host                : 
' app_server          : 
' processesed         : 
'
    strSQL = "create table system_msg ("
    strSQL = strSQL + "system_msg_id   LONG, "
    strSQL = strSQL + "type            LONGTEXT, "
    strSQL = strSQL + "message         LONGTEXT, "
    strSQL = strSQL + "host            TEXT(50), "
    strSQL = strSQL + "app_server      TEXT(50), "
    strSQL = strSQL + "processesed     TEXT(1), "
    strSQL = strSQL + "constraint system_msg1 "
    strSQL = strSQL + "primary key (system_msg_id));"
    db.Execute strSQL
 
'
' Table               : analysis_rule
' Description         : deffinition for a executible system check
' analysis_rule_id    : 
' type                : 
' rule_def            : definition -sql, wmi, perl, etc 
' error               : error message displayed if rule unexecutible 
' name                : 
' sf_error_deff_id    : 
' active              : 
' execution_interval  : 
' description         : 
' notimeout           : 
'
    strSQL = "create table analysis_rule ("
    strSQL = strSQL + "analysis_rule_id LONG, "
    strSQL = strSQL + "type            TEXT(10), "
    strSQL = strSQL + "rule_def        LONGTEXT, "
    strSQL = strSQL + "error           TEXT(254), "
    strSQL = strSQL + "name            TEXT(100), "
    strSQL = strSQL + "sf_error_deff_id LONG, "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "execution_interval LONGTEXT, "
    strSQL = strSQL + "description     TEXT(100), "
    strSQL = strSQL + "notimeout       TEXT(1), "
    strSQL = strSQL + "constraint analysis_rule1 "
    strSQL = strSQL + "primary key (analysis_rule_id));"
    db.Execute strSQL
 
'
' Table               : reaction
' Description         : deffinition for a executible system check
' reaction_id         : 
' type                : 
' rule_def            : definition -sql, wmi, perl, etc 
' error               : error message displayed if rule unexecutible 
' name                : 
' host_specific       : if true, execute reaction on host of error,otherwise central 
' active              : 
' sv_name             : 
'
    strSQL = "create table reaction ("
    strSQL = strSQL + "reaction_id     LONG, "
    strSQL = strSQL + "type            TEXT(10), "
    strSQL = strSQL + "rule_def        LONGTEXT, "
    strSQL = strSQL + "error           TEXT(100), "
    strSQL = strSQL + "name            TEXT(20), "
    strSQL = strSQL + "host_specific   TEXT(50), "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "sv_name         TEXT(50), "
    strSQL = strSQL + "constraint reaction1 "
    strSQL = strSQL + "primary key (reaction_id));"
    db.Execute strSQL
 
'
' Table               : collector
' Description         : script/sql to collect non internal statistics
' collector_id        : 
' type                : 
' rule_def            : definition -sql, wmi, perl, etc 
' error               : error message displayed if rule unexecutible 
' name                : 
' odbc                : 
' active              : 
' sft_elmnt_id        : 
' host_id             : host a collector is associated with 
' description         : description of the statistic 
' execution_interval  : 
' max_records         : 
' notimeout           : 
'
    strSQL = "create table collector ("
    strSQL = strSQL + "collector_id    LONG, "
    strSQL = strSQL + "type            TEXT(10), "
    strSQL = strSQL + "rule_def        LONGTEXT, "
    strSQL = strSQL + "error           LONGTEXT, "
    strSQL = strSQL + "name            TEXT(100), "
    strSQL = strSQL + "odbc            TEXT(50), "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "sft_elmnt_id    LONGTEXT, "
    strSQL = strSQL + "host_id         LONGTEXT, "
    strSQL = strSQL + "description     TEXT(100), "
    strSQL = strSQL + "execution_interval LONG, "
    strSQL = strSQL + "max_records     LONG, "
    strSQL = strSQL + "notimeout       TEXT(1), "
    strSQL = strSQL + "constraint collector1 "
    strSQL = strSQL + "primary key (collector_id));"
    db.Execute strSQL
 
'
' Table               : sft_mng_sys
' Description         : 
' sft_mng_sys_id      : 
' name                : 
' status              : 
' state               : 
' type                : 
'
    strSQL = "create table sft_mng_sys ("
    strSQL = strSQL + "sft_mng_sys_id  LONG, "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "status          TEXT(20), "
    strSQL = strSQL + "state           TEXT(20), "
    strSQL = strSQL + "type            LONGTEXT, "
    strSQL = strSQL + "constraint sft_mng_sys1 "
    strSQL = strSQL + "primary key (sft_mng_sys_id));"
    db.Execute strSQL
 
'
' Table               : sft_error_defs
' Description         : string errors and messages will be configured per component/appserver
' error_defs_id       : 
' ev_type             : 
' ev_level            : 
' ev_time             : 
' search_string       : 
' ev_sub_type         : 
' host                : 
' name                : Name of Error Deffinition 
' sv_name             : 
' cc_alias            : 
' sf_elmnt_id         : 
' active              : 
' type                : type of error definition 
'
    strSQL = "create table sft_error_defs ("
    strSQL = strSQL + "error_defs_id   LONG, "
    strSQL = strSQL + "ev_type         TEXT(50), "
    strSQL = strSQL + "ev_level        TEXT(50), "
    strSQL = strSQL + "ev_time         TEXT(50), "
    strSQL = strSQL + "search_string   TEXT(254), "
    strSQL = strSQL + "ev_sub_type     TEXT(50), "
    strSQL = strSQL + "host            TEXT(254), "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "sv_name         TEXT(50), "
    strSQL = strSQL + "cc_alias        TEXT(50), "
    strSQL = strSQL + "sf_elmnt_id     TEXT(50), "
    strSQL = strSQL + "active          TEXT(1), "
    strSQL = strSQL + "type            TEXT(10), "
    strSQL = strSQL + "constraint sft_error_defs1 "
    strSQL = strSQL + "primary key (error_defs_id));"
    db.Execute strSQL
 
'
' Table               : server_task
' Description         : related to sft_elment (for all tasks per app server) or components and monitored_comps , (all task per component)
' server_task_id      : 
' sv_name             : 
' cc_alias            : 
' tk_taskid           : 
' tk_pid              : 
' tk_disp_runstate    : 
' cc_runmode          : 
' tk_start_time       : 
' tk_end_time         : 
' tk_status           : 
' cg_alias            : 
' sft_elmnt_id        : 
' sft_elmnt_comp_id   : 
' tk_parent_t         : 
' cc_incarn_no        : 
' tk_label            : 
' tk_tasktype         : 
'
    strSQL = "create table server_task ("
    strSQL = strSQL + "server_task_id  LONG, "
    strSQL = strSQL + "sv_name         TEXT(100), "
    strSQL = strSQL + "cc_alias        TEXT(100), "
    strSQL = strSQL + "tk_taskid       LONG, "
    strSQL = strSQL + "tk_pid          LONG, "
    strSQL = strSQL + "tk_disp_runstate TEXT(100), "
    strSQL = strSQL + "cc_runmode      TEXT(100), "
    strSQL = strSQL + "tk_start_time   TEXT(50), "
    strSQL = strSQL + "tk_end_time     TEXT(50), "
    strSQL = strSQL + "tk_status       TEXT(254), "
    strSQL = strSQL + "cg_alias        TEXT(100), "
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "sft_elmnt_comp_id LONG, "
    strSQL = strSQL + "tk_parent_t     TEXT(50), "
    strSQL = strSQL + "cc_incarn_no    TEXT(50), "
    strSQL = strSQL + "tk_label        TEXT(50), "
    strSQL = strSQL + "tk_tasktype     TEXT(50), "
    strSQL = strSQL + "constraint server_task1 "
    strSQL = strSQL + "primary key (server_task_id));"
    db.Execute strSQL
 
'
' Table               : monitored_comps
' Description         : represents all components per app server being monitored
' monitored_comps_id  : 
' sv_name             : 
' cp_max_mts          : 
' cc_name             : use this key to show running components per component deff 
' ct_alias            : 
' cg_name             : 
' cc_runmode          : 
' cp_disp_run_state   : 
' cp_num_run          : 
' cp_max_tas          : 
' cp_actv_mt          : 
' cc_alias            : 
' cp_start_time       : 
' cp_end_time         : 
' cp_status           : 
' sft_elmnt_id        : 
' sft_elmnt_comp_id   : 
'
    strSQL = "create table monitored_comps ("
    strSQL = strSQL + "monitored_comps_id LONG, "
    strSQL = strSQL + "sv_name         TEXT(50), "
    strSQL = strSQL + "cp_max_mts      LONGTEXT, "
    strSQL = strSQL + "cc_name         TEXT(50), "
    strSQL = strSQL + "ct_alias        TEXT(50), "
    strSQL = strSQL + "cg_name         TEXT(50), "
    strSQL = strSQL + "cc_runmode      TEXT(50), "
    strSQL = strSQL + "cp_disp_run_state TEXT(50), "
    strSQL = strSQL + "cp_num_run      LONGTEXT, "
    strSQL = strSQL + "cp_max_tas      LONGTEXT, "
    strSQL = strSQL + "cp_actv_mt      LONGTEXT, "
    strSQL = strSQL + "cc_alias        TEXT(50), "
    strSQL = strSQL + "cp_start_time   TEXT(50), "
    strSQL = strSQL + "cp_end_time     TEXT(50), "
    strSQL = strSQL + "cp_status       TEXT(50), "
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "sft_elmnt_comp_id TEXT(50), "
    strSQL = strSQL + "constraint monitored_comps1 "
    strSQL = strSQL + "primary key (monitored_comps_id));"
    db.Execute strSQL
 
'
' Table               : processes
' Description         : related to the app server via sft_enlmnt_id, aslo to component or task via cc_name or ct_name,respectively
' process_id          : 
' sv_name             : 
' task_id             : 
' pid                 : 
' cc_alias            : 
' cc_name             : 
' host                : 
' state               : 
' process             : 
' cpu                 : 
' cpu_time            : 
' memory              : 
' pagefaults          : 
' virtualmem          : 
' priority            : 
' threads             : 
' sft_elmnt_id        : 
' sft_elmnt_comp_id   : 
' kernel_time         : 
' user_time           : 
'
    strSQL = "create table processes ("
    strSQL = strSQL + "process_id      LONG, "
    strSQL = strSQL + "sv_name         TEXT(50), "
    strSQL = strSQL + "task_id         TEXT(10), "
    strSQL = strSQL + "pid             LONGTEXT, "
    strSQL = strSQL + "cc_alias        TEXT(50), "
    strSQL = strSQL + "cc_name         TEXT(100), "
    strSQL = strSQL + "host            TEXT(50), "
    strSQL = strSQL + "state           TEXT(50), "
    strSQL = strSQL + "process         TEXT(50), "
    strSQL = strSQL + "cpu             DOUBLE, "
    strSQL = strSQL + "cpu_time        LONGTEXT, "
    strSQL = strSQL + "memory          LONG, "
    strSQL = strSQL + "pagefaults      LONG, "
    strSQL = strSQL + "virtualmem      LONG, "
    strSQL = strSQL + "priority        TEXT(50), "
    strSQL = strSQL + "threads         LONGTEXT, "
    strSQL = strSQL + "sft_elmnt_id    LONGTEXT, "
    strSQL = strSQL + "sft_elmnt_comp_id LONGTEXT, "
    strSQL = strSQL + "kernel_time     LONGTEXT, "
    strSQL = strSQL + "user_time       LONGTEXT, "
    strSQL = strSQL + "constraint processes1 "
    strSQL = strSQL + "primary key (process_id));"
    db.Execute strSQL
 
'
' Table               : components
' Description         : will contain all Siebel default components, plus user definable components
' components_id       : 
' description         : 
' log_analyze         : 
' log_monitor         : 
' sft_elmnt_id        : 
' cc_alias            : 
'
    strSQL = "create table components ("
    strSQL = strSQL + "components_id   LONG, "
    strSQL = strSQL + "description     TEXT(100), "
    strSQL = strSQL + "log_analyze     TEXT(1), "
    strSQL = strSQL + "log_monitor     TEXT(1), "
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "cc_alias        TEXT(80), "
    strSQL = strSQL + "constraint components1 "
    strSQL = strSQL + "primary key (components_id));"
    db.Execute strSQL
 
'
' Table               : analysis_err
' Description         : If the anlaysis object returns false, the error defined here will be inserted into error event table
' analysis_err_id     : 
' evt_type            : 
' evt_event_sub_type  : 
' evt_event_level     : 
' evt_event_time      : 
' evt_event_string    : 
' evt_status          : 
' evt_cc_alias        : 
' evt_sv_name         : 
' evt_sft_elmnt_id    : 
' evt_host            : 
' name                : 
'
    strSQL = "create table analysis_err ("
    strSQL = strSQL + "analysis_err_id LONG, "
    strSQL = strSQL + "evt_type        TEXT(10), "
    strSQL = strSQL + "evt_event_sub_type TEXT(50), "
    strSQL = strSQL + "evt_event_level LONG, "
    strSQL = strSQL + "evt_event_time  TEXT(50), "
    strSQL = strSQL + "evt_event_string TEXT(254), "
    strSQL = strSQL + "evt_status      TEXT(50), "
    strSQL = strSQL + "evt_cc_alias    TEXT(50), "
    strSQL = strSQL + "evt_sv_name     TEXT(50), "
    strSQL = strSQL + "evt_sft_elmnt_id LONG, "
    strSQL = strSQL + "evt_host        TEXT(254), "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "constraint analysis_err1 "
    strSQL = strSQL + "primary key (analysis_err_id));"
    db.Execute strSQL
 
'
' Table               : tableids
' Description         : 
' table_name          : 
' id                  : 
'
    strSQL = "create table tableids ("
    strSQL = strSQL + "table_name      TEXT(50), "
    strSQL = strSQL + "id              LONG, "
    strSQL = strSQL + "constraint tableids1 "
    strSQL = strSQL + "primary key (table_name));"
    db.Execute strSQL
 
'
' Table               : data_source
' Description         : 
' data_source_id      : 
' name                : 
' username            : 
' password            : 
' host                : 
' alias               : alias name for ODBC 
'
    strSQL = "create table data_source ("
    strSQL = strSQL + "data_source_id  LONG, "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "username        TEXT(50), "
    strSQL = strSQL + "password        TEXT(50), "
    strSQL = strSQL + "host            TEXT(50), "
    strSQL = strSQL + "alias           TEXT(50), "
    strSQL = strSQL + "constraint data_source1 "
    strSQL = strSQL + "primary key (data_source_id, alias));"
    db.Execute strSQL
 
'
' Table               : administrators
' Description         : persons with email address 
' administrators_id   : 
' first_name          : 
' last_name           : 
' password            : 
' email               : 
' phone               : 
' pager               : 
' default_admin       : 
' user_name           : 
' schedule_id         : (Foreign Key
'                        references SCHEDULE.schedule_id)
'
    strSQL = "create table administrators ("
    strSQL = strSQL + "administrators_id LONG, "
    strSQL = strSQL + "first_name      TEXT(50), "
    strSQL = strSQL + "last_name       TEXT(50), "
    strSQL = strSQL + "password        TEXT(50), "
    strSQL = strSQL + "email           TEXT(70), "
    strSQL = strSQL + "phone           TEXT(50), "
    strSQL = strSQL + "pager           TEXT(50), "
    strSQL = strSQL + "default_admin   TEXT(1), "
    strSQL = strSQL + "user_name       TEXT(50), "
    strSQL = strSQL + "schedule_id     LONG, "
    strSQL = strSQL + "constraint administrators1 "
    strSQL = strSQL + "primary key (administrators_id), "
    strSQL = strSQL + "constraint administrators2 "
    strSQL = strSQL + "foreign key (schedule_id) references schedule (schedule_id));"
    db.Execute strSQL
 
'
' Table               : errorexceptions
' Description         : ignore errors based on time/date or string
' errorexceptions_id  : 
' errorexception      : 
' time_exemption      : ignore errors before this date 
' err_type_exept      : 
' note_rule_id        : shorted to avaoid trucation (Foreign Key
'                        references NOTIFICATION_RULE.note_rule_id)
'
    strSQL = "create table errorexceptions ("
    strSQL = strSQL + "errorexceptions_id TEXT(10), "
    strSQL = strSQL + "errorexception  TEXT(254), "
    strSQL = strSQL + "time_exemption  DATETIME, "
    strSQL = strSQL + "err_type_exept  TEXT(10), "
    strSQL = strSQL + "note_rule_id    LONG, "
    strSQL = strSQL + "constraint errorexceptions1 "
    strSQL = strSQL + "primary key (errorexceptions_id), "
    strSQL = strSQL + "constraint errorexceptions2 "
    strSQL = strSQL + "foreign key (note_rule_id) references notification_rule (note_rule_id));"
    db.Execute strSQL
 
'
' Table               : host_os_stats
' Description         : machine specific info
' db_id               : 
' running_since       : 
' status              : 
' memory_consuption   : 
' cpu_utilization     : 
' time_stamp          : 
' host_id             : (Foreign Key
'                        references HOST.host_id)
'
    strSQL = "create table host_os_stats ("
    strSQL = strSQL + "db_id           TEXT(10), "
    strSQL = strSQL + "running_since   DATETIME, "
    strSQL = strSQL + "status          TEXT(10), "
    strSQL = strSQL + "memory_consuption TEXT(50), "
    strSQL = strSQL + "cpu_utilization TEXT(50), "
    strSQL = strSQL + "time_stamp      DATETIME, "
    strSQL = strSQL + "host_id         LONG, "
    strSQL = strSQL + "constraint host_os_stats1 "
    strSQL = strSQL + "primary key (db_id), "
    strSQL = strSQL + "constraint host_os_stats2 "
    strSQL = strSQL + "foreign key (host_id) references host (host_id));"
    db.Execute strSQL
 
'
' Table               : com_admin
' Description         : 
' com_server_id       : truncated from comunicationserver_id (Foreign Key
'                        references COMUNICATIONSERVER.com_server_id)
' administrators_id   : (Foreign Key
'                        references ADMINISTRATORS.administrators_id)
'
    strSQL = "create table com_admin ("
    strSQL = strSQL + "com_server_id   LONG, "
    strSQL = strSQL + "administrators_id LONG, "
    strSQL = strSQL + "constraint com_admin1 "
    strSQL = strSQL + "primary key (com_server_id, administrators_id), "
    strSQL = strSQL + "constraint com_admin2 "
    strSQL = strSQL + "foreign key (com_server_id) references comunicationserver (com_server_id), "
    strSQL = strSQL + "constraint com_admin3 "
    strSQL = strSQL + "foreign key (administrators_id) references administrators (administrators_id));"
    db.Execute strSQL
 
'
' Table               : stat_vals
' Description         : values populated as result of stat_defs
' stat_vals_id        : 
' val                 : 
' time_stmp           : 
' collector_id        : (Foreign Key
'                        references COLLECTOR.collector_id)
'
    strSQL = "create table stat_vals ("
    strSQL = strSQL + "stat_vals_id    LONG, "
    strSQL = strSQL + "val             DOUBLE, "
    strSQL = strSQL + "time_stmp       DATETIME, "
    strSQL = strSQL + "collector_id    LONG, "
    strSQL = strSQL + "constraint stat_vals1 "
    strSQL = strSQL + "primary key (stat_vals_id), "
    strSQL = strSQL + "constraint stat_vals2 "
    strSQL = strSQL + "foreign key (collector_id) references collector (collector_id));"
    db.Execute strSQL
 
'
' Table               : sft_elmnt
' Description         : 
' sft_elmnt_id        : 
' type                : 
' description         : 
' name                : 
' os                  : 
' host                : 
' installdir          : 
' status              : 
' exe                 : 
' service_name        : 
' parent_elmnt_id     : 
' logdir              : 
' monitor_service     : 
' restart_service     : 
' send_event          : send event on service failure 
' port                : 
' mon_interval        : 
' sft_mng_sys_id      : (Foreign Key
'                        references SFT_MNG_SYS.sft_mng_sys_id)
'
    strSQL = "create table sft_elmnt ("
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "type            TEXT(20), "
    strSQL = strSQL + "description     TEXT(50), "
    strSQL = strSQL + "name            TEXT(50), "
    strSQL = strSQL + "os              TEXT(20), "
    strSQL = strSQL + "host            TEXT(50), "
    strSQL = strSQL + "installdir      TEXT(254), "
    strSQL = strSQL + "status          TEXT(20), "
    strSQL = strSQL + "exe             TEXT(50), "
    strSQL = strSQL + "service_name    TEXT(50), "
    strSQL = strSQL + "parent_elmnt_id LONG, "
    strSQL = strSQL + "logdir          TEXT(254), "
    strSQL = strSQL + "monitor_service TEXT(1), "
    strSQL = strSQL + "restart_service TEXT(1), "
    strSQL = strSQL + "send_event      TEXT(1), "
    strSQL = strSQL + "port            DOUBLE, "
    strSQL = strSQL + "mon_interval    LONG, "
    strSQL = strSQL + "sft_mng_sys_id  LONG, "
    strSQL = strSQL + "constraint sft_elmnt1 "
    strSQL = strSQL + "primary key (sft_elmnt_id), "
    strSQL = strSQL + "constraint sft_elmnt2 "
    strSQL = strSQL + "foreign key (sft_mng_sys_id) references sft_mng_sys (sft_mng_sys_id));"
    db.Execute strSQL
 
'
' Table               : sft_elmnt_comp
' Description         : key value description of component
' sft_elmnt_comp_id   : 
' type                : 
' elmnt_key           : 
' elmnt_value         : 
' status              : 
' sft_elmnt_id        : (Foreign Key
'                        references SFT_ELMNT.sft_elmnt_id)
'
    strSQL = "create table sft_elmnt_comp ("
    strSQL = strSQL + "sft_elmnt_comp_id LONG, "
    strSQL = strSQL + "type            TEXT(20), "
    strSQL = strSQL + "elmnt_key       TEXT(50), "
    strSQL = strSQL + "elmnt_value     TEXT(254), "
    strSQL = strSQL + "status          TEXT(20), "
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "constraint sft_elmnt_comp1 "
    strSQL = strSQL + "primary key (sft_elmnt_comp_id), "
    strSQL = strSQL + "constraint sft_elmnt_comp2 "
    strSQL = strSQL + "foreign key (sft_elmnt_id) references sft_elmnt (sft_elmnt_id));"
    db.Execute strSQL
 
'
' Table               : comp_errdef
' Description         : 
' components_id       : (Foreign Key
'                        references COMPONENTS.components_id)
' error_defs_id       : (Foreign Key
'                        references SFT_ERROR_DEFS.error_defs_id)
'
    strSQL = "create table comp_errdef ("
    strSQL = strSQL + "components_id   LONG, "
    strSQL = strSQL + "error_defs_id   LONG, "
    strSQL = strSQL + "constraint comp_errdef1 "
    strSQL = strSQL + "primary key (components_id, error_defs_id), "
    strSQL = strSQL + "constraint comp_errdef2 "
    strSQL = strSQL + "foreign key (components_id) references components (components_id), "
    strSQL = strSQL + "constraint comp_errdef3 "
    strSQL = strSQL + "foreign key (error_defs_id) references sft_error_defs (error_defs_id));"
    db.Execute strSQL
 
'
' Table               : com_srvr_vals
' Description         : key value description of component
' com_srvr_vals_id    : 
' type                : 
' elmnt_key           : 
' elmnt_value         : 
' status              : 
' com_server_id       : truncated from comunicationserver_id (Foreign Key
'                        references COMUNICATIONSERVER.com_server_id)
'
    strSQL = "create table com_srvr_vals ("
    strSQL = strSQL + "com_srvr_vals_id LONG, "
    strSQL = strSQL + "type            TEXT(20), "
    strSQL = strSQL + "elmnt_key       TEXT(50), "
    strSQL = strSQL + "elmnt_value     TEXT(254), "
    strSQL = strSQL + "status          TEXT(20), "
    strSQL = strSQL + "com_server_id   LONG, "
    strSQL = strSQL + "constraint com_srvr_vals1 "
    strSQL = strSQL + "primary key (com_srvr_vals_id), "
    strSQL = strSQL + "constraint com_srvr_vals2 "
    strSQL = strSQL + "foreign key (com_server_id) references comunicationserver (com_server_id));"
    db.Execute strSQL
 
'
' Table               : notification_reaction
' Description         : 
' note_rule_id        : shorted to avaoid trucation (Foreign Key
'                        references NOTIFICATION_RULE.note_rule_id)
' reaction_id         : (Foreign Key
'                        references REACTION.reaction_id)
'
    strSQL = "create table notification_reaction ("
    strSQL = strSQL + "note_rule_id    LONG, "
    strSQL = strSQL + "reaction_id     LONG, "
    strSQL = strSQL + "constraint notification_reaction1 "
    strSQL = strSQL + "primary key (note_rule_id, reaction_id), "
    strSQL = strSQL + "constraint notification_reaction2 "
    strSQL = strSQL + "foreign key (note_rule_id) references notification_rule (note_rule_id), "
    strSQL = strSQL + "constraint notification_reaction3 "
    strSQL = strSQL + "foreign key (reaction_id) references reaction (reaction_id));"
    db.Execute strSQL
 
'
' Table               : analysis_errdef
' Description         : 
' analysis_rule_id    : (Foreign Key
'                        references ANALYSIS_RULE.analysis_rule_id)
' error_defs_id       : (Foreign Key
'                        references SFT_ERROR_DEFS.error_defs_id)
'
    strSQL = "create table analysis_errdef ("
    strSQL = strSQL + "analysis_rule_id LONG, "
    strSQL = strSQL + "error_defs_id   LONG, "
    strSQL = strSQL + "constraint analysis_errdef1 "
    strSQL = strSQL + "primary key (analysis_rule_id, error_defs_id), "
    strSQL = strSQL + "constraint analysis_errdef2 "
    strSQL = strSQL + "foreign key (analysis_rule_id) references analysis_rule (analysis_rule_id), "
    strSQL = strSQL + "constraint analysis_errdef3 "
    strSQL = strSQL + "foreign key (error_defs_id) references sft_error_defs (error_defs_id));"
    db.Execute strSQL
 
'
' Table               : sft_err_deff
' Description         : 
' sft_elmnt_id        : (Foreign Key
'                        references SFT_ELMNT.sft_elmnt_id)
' error_defs_id       : (Foreign Key
'                        references SFT_ERROR_DEFS.error_defs_id)
'
    strSQL = "create table sft_err_deff ("
    strSQL = strSQL + "sft_elmnt_id    LONG, "
    strSQL = strSQL + "error_defs_id   LONG, "
    strSQL = strSQL + "constraint sft_err_deff1 "
    strSQL = strSQL + "primary key (sft_elmnt_id, error_defs_id), "
    strSQL = strSQL + "constraint sft_err_deff2 "
    strSQL = strSQL + "foreign key (sft_elmnt_id) references sft_elmnt (sft_elmnt_id), "
    strSQL = strSQL + "constraint sft_err_deff3 "
    strSQL = strSQL + "foreign key (error_defs_id) references sft_error_defs (error_defs_id));"
    db.Execute strSQL
 
 
    'Add NOT NULL constraint to table attributes
    strNotNull = "Is Not Null"
 
' ERROREVENT table
 
' NOTIFICATION_RULE table
    db.tabledefs("notification_rule").Fields("message").ValidationRule = strNotNull
 
' HOST table
 
' SCHEDULE table
 
' COMUNICATIONSERVER table
 
' SYSTEM_MSG table
 
' ANALYSIS_RULE table
 
' REACTION table
 
' COLLECTOR table
 
' SFT_MNG_SYS table
 
' SFT_ERROR_DEFS table
 
' SERVER_TASK table
 
' MONITORED_COMPS table
 
' PROCESSES table
 
' COMPONENTS table
    db.tabledefs("components").Fields("cc_alias").ValidationRule = strNotNull
 
' ANALYSIS_ERR table
 
' TABLEIDS table
    db.tabledefs("tableids").Fields("id").ValidationRule = strNotNull
 
' DATA_SOURCE table
 
' ADMINISTRATORS table
 
' ERROREXCEPTIONS table
 
' HOST_OS_STATS table
 
' COM_ADMIN table
 
' STAT_VALS table
    db.tabledefs("stat_vals").Fields("val").ValidationRule = strNotNull
    db.tabledefs("stat_vals").Fields("time_stmp").ValidationRule = strNotNull
 
' SFT_ELMNT table
 
' SFT_ELMNT_COMP table
    db.tabledefs("sft_elmnt_comp").Fields("elmnt_key").ValidationRule = strNotNull
    db.tabledefs("sft_elmnt_comp").Fields("elmnt_value").ValidationRule = strNotNull
 
' COMP_ERRDEF table
 
' COM_SRVR_VALS table
    db.tabledefs("com_srvr_vals").Fields("elmnt_key").ValidationRule = strNotNull
    db.tabledefs("com_srvr_vals").Fields("elmnt_value").ValidationRule = strNotNull
 
' NOTIFICATION_REACTION table
 
' ANALYSIS_ERRDEF table
 
' SFT_ERR_DEFF table
 
    db.Close
    ddsCreateDB = True
    frmVadmin21.txtStatus.Text = ""
 
    Exit Function
 
onError:
    MsgBox Err.Description
    ddsCreateDB = False
 
End Function
 
 
'
' Function : ddsDropDB 
' Purpose  : delete the database
' Returns  : Boolean
'
Function ddsDropDb() As Boolean
    Dim strDBName  As String
 
    On Error GoTo onError
 
    strDBName = "d:\vadmin2\source\data\msvb\vadmin21.mdb"
 
    If Dir(strDBName) <> "" Then Kill strDBName
 
    ddsDropDB = True
 
    Exit Function
 
onError:
    MsgBox Err.Description
    ddsDropDB = False
 
End Function
 
 
'
' Function : ddsLoadDatatFromFile 
' Purpose  : populate the database
' Passed   : db           - open database
'            strPath      - the path to the schema.ini file
'            strFromFile  - the input file (*.txt)
'            strToTable   - the name of the table to populate
' Returns  : Boolean
'
Function ddsLoadDataFromFile(db As Database, _
                             strPath As String, _
                             strFromFile As String, _
                             strToTable As String) As Boolean
    Dim tdTable      As TableDef
    Dim strSql       As String
    Dim strDbConnect As String
    Dim strTempTable As String
 
    On Error GoTo onError
 
    frmVadmin21.txtStatus.Text = "Loading data from " & strFromFile & " to table " & strToTable
 
    'use TableDef object to create a link to the text file
    'strPath is a path to the schema.ini definition file
    strTempTable    = "ddsTemp" & strToTable
    strDbConnect    = "Text;DATABASE=" & strPath
    Set tdTable     = db.CreateTableDef(strTempTable)
    tdTable.Connect = strDbConnect
    tdTable.SourceTableName = strFromFile
 
    'make a linked table
    db.TableDefs.Append tdTable
 
    'read from the linked table into the database
    strSql = "insert into " & strToTable & " select * from " & strTempTable
 
    db.Execute strSql
 
    ' drop the linked table
    db.TableDefs.Delete strTempTable
 
    ddsLoadDataFromFile = True
 
    frmVadmin21.txtStatus.Text = ""
    Exit Function
 
onError:
    MsgBox Err.Description
    ddsLoadDataFromFile = False
 
End Function
 
 
'
' Method   : cmdCreateDB_Click 
' Purpose  : handle the create database event
'
Private Sub cmdCreateDB_Click()
 
    ' drop the database
    ddsDropDb
 
    ' create the database
    If Not ddsCreateDb Then Exit Sub
 
    MsgBox "Database Created Successfully."
End Sub 
 
'
' Method   : cmdExit_Click 
' Purpose  : handle the exit event
'
Private Sub cmdExit_Click()
    Unload Me
End Sub 
 
'
' Method   : cmdLoadData_Click 
' Purpose  : handle the load data event
'
Private Sub cmdLoadData_Click()
    Dim db        As Database
    Dim strDBName As String
    Dim strPath   As String
 
    strDBName = "d:\vadmin2\source\data\msvb\vadmin21.mdb"
    strPath   = "d:\vadmin2\source\data\msvb\"
 
    Set db = OpenDatabase(strDBName)
 
    If Not ddsLoadDataFromFile(db, strPath, "ERROREVENT.txt", "errorevent") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "NOTIFICATION_RULE.txt", "notification_rule") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "HOST.txt", "host") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SCHEDULE.txt", "schedule") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COMUNICATIONSERVER.txt", "comunicationserver") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SYSTEM_MSG.txt", "system_msg") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "ANALYSIS_RULE.txt", "analysis_rule") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "REACTION.txt", "reaction") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COLLECTOR.txt", "collector") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SFT_MNG_SYS.txt", "sft_mng_sys") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SFT_ERROR_DEFS.txt", "sft_error_defs") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SERVER_TASK.txt", "server_task") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "MONITORED_COMPS.txt", "monitored_comps") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "PROCESSES.txt", "processes") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COMPONENTS.txt", "components") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "ANALYSIS_ERR.txt", "analysis_err") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "TABLEIDS.txt", "tableids") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "DATA_SOURCE.txt", "data_source") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "ADMINISTRATORS.txt", "administrators") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "ERROREXCEPTIONS.txt", "errorexceptions") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "HOST_OS_STATS.txt", "host_os_stats") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COM_ADMIN.txt", "com_admin") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "STAT_VALS.txt", "stat_vals") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SFT_ELMNT.txt", "sft_elmnt") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SFT_ELMNT_COMP.txt", "sft_elmnt_comp") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COMP_ERRDEF.txt", "comp_errdef") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "COM_SRVR_VALS.txt", "com_srvr_vals") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "NOTIFICATION_REACTIO.txt", "notification_reaction") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "ANALYSIS_ERRDEF.txt", "analysis_errdef") Then Exit Sub
    If Not ddsLoadDataFromFile(db, strPath, "SFT_ERR_DEFF.txt", "sft_err_deff") Then Exit Sub
 
    db.Close
    MsgBox "Database Loaded Successfully."
 
End Sub 
 
 
