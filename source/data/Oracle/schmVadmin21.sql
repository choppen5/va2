rem
rem Project: DDS Project
rem Author : Charles Oppenheimer
rem Date   : May 02 2009 12:19
rem File auto-generated by Database Design Studio V1.09.2
rem Syntax : sqlplus user/password @filename.sql
rem
rem
rem Target DBMS: 'Oracle'
rem
 
 
rem
rem Table               : errorevent
rem Description         : popultated as result of error deff conditions or  - via XML interface or ODBC
rem errorevent_id       : 
rem type                : 
rem event_sub_type      : 
rem event_level         : 
rem event_time          : 
rem event_string        : 
rem status              : 
rem error_defs_id       : 
rem cc_alias            : 
rem sv_name             : 
rem sft_elmnt_id        : 
rem processed           : 
rem reactionfired       : 
rem host                : host where error occured 
rem analysis_rule_id    : 
rem note_rule_id        : 
rem error_def_id        : 
rem notimeout           : 
rem file_path           : 
rem
CREATE TABLE errorevent (
    errorevent_id   NUMBER(38) NOT NULL,
    type            CHAR(50),
    event_sub_type  CHAR(50),
    event_level     CHAR(20),
    event_time      DATE,
    event_string    VARCHAR2(2000),
    status          CHAR(10),
    error_defs_id   NUMBER(38),
    cc_alias        CHAR(50),
    sv_name         CHAR(50),
    sft_elmnt_id    NUMBER(38),
    processed       CHAR(1),
    reactionfired   CHAR(1),
    host            CHAR(50),
    analysis_rule_id NUMBER(38),
    note_rule_id    NUMBER(38),
    error_def_id    NUMBER(38),
    notimeout       CHAR(1),
    file_path       CHAR(254),
CONSTRAINT pk_errorevent PRIMARY KEY (errorevent_id));
 
 
rem
rem Table               : notification_rule
rem Description         : rules for monitoring error event table - conditions will be "anded" - will send messages to communication server
rem note_rule_id        : shorted to avaoid trucation 
rem name                : user name for notification rule 
rem message             : not a condition 
rem notify_all          : 
rem incl_ev_string      : 
rem inc_ev_level        : 
rem inc_ev_subtype      : 
rem type                : 
rem status              : 
rem active              : 
rem ev_sft_elmnt_id     : anded foriegn key to application table 
rem ev_event_sub_type   : anded 
rem ev_event_level      : anded 
rem ev_event_time       : anded 
rem ev_event_string     : anded - regexp 
rem ev_type             : 
rem
CREATE TABLE notification_rule (
    note_rule_id    NUMBER(38) NOT NULL,
    name            CHAR(30),
    message         CHAR(245) NOT NULL,
    notify_all      CHAR(1),
    incl_ev_string  CHAR(1),
    inc_ev_level    CHAR(50),
    inc_ev_subtype  CHAR(1),
    type            CHAR(50),
    status          CHAR(10),
    active          CHAR(1),
    ev_sft_elmnt_id NUMBER(38),
    ev_event_sub_type CHAR(50),
    ev_event_level  NUMBER(38),
    ev_event_time   CHAR(50),
    ev_event_string CHAR(254),
    ev_type         CHAR(20),
CONSTRAINT pk_notification_rule PRIMARY KEY (note_rule_id));
 
 
rem
rem Table               : host
rem Description         : machine specific info
rem host_id             : 
rem hostname            : 
rem ipaddress           : 
rem os                  : 
rem status              : 
rem username            : 
rem password            : 
rem check_interval      : 
rem no_ping             : 
rem
CREATE TABLE host (
    host_id         NUMBER(38) NOT NULL,
    hostname        CHAR(50),
    ipaddress       CHAR(50),
    os              CHAR(50),
    status          CHAR(20),
    username        CHAR(100),
    password        CHAR(100),
    check_interval  NUMBER(38),
    no_ping         CHAR(1),
CONSTRAINT pk_host PRIMARY KEY (host_id));
 
 
rem
rem Table               : schedule
rem Description         : first draft
rem schedule_id         : 
rem schedule_every      : overides all hour minutes specs 
rem monday              : 
rem tuesday             : 
rem wednesday           : 
rem thursday            : 
rem friday              : 
rem saturday            : 
rem sunday              : 
rem every_day           : overides daily columns 
rem hour_start          : 24 
rem minute_start        : 60 
rem hour_end            : 60 
rem minute_end          : 
rem every_hour          : overides hour/minutes 
rem schd_name           : 
rem start_time          : 
rem end_time            : 
rem
CREATE TABLE schedule (
    schedule_id     NUMBER(38) NOT NULL,
    schedule_every  VARCHAR2(1),
    monday          VARCHAR2(1),
    tuesday         VARCHAR2(1),
    wednesday       VARCHAR2(1),
    thursday        VARCHAR2(1),
    friday          VARCHAR2(1),
    saturday        VARCHAR2(1),
    sunday          VARCHAR2(1),
    every_day       VARCHAR2(1),
    hour_start      VARCHAR2(2),
    minute_start    VARCHAR2(2),
    hour_end        VARCHAR2(2),
    minute_end      VARCHAR2(2),
    every_hour      VARCHAR2(1),
    schd_name       VARCHAR2(50),
    start_time      CHAR(8),
    end_time        CHAR(8),
CONSTRAINT pk_schedule PRIMARY KEY (schedule_id));
 
 
rem
rem Table               : comunicationserver
rem Description         : 
rem com_server_id       : truncated from comunicationserver_id 
rem smtp_server         : 
rem webserver           : for future use 
rem paging_server       : futureuse 
rem modemnumber         : future use 
rem type                : 
rem active              : 
rem name                : 
rem
CREATE TABLE comunicationserver (
    com_server_id   NUMBER(38) NOT NULL,
    smtp_server     CHAR(50),
    webserver       CHAR(50),
    paging_server   CHAR(50),
    modemnumber     CHAR(50),
    type            CHAR(20),
    active          CHAR(1),
    name            CHAR(50),
CONSTRAINT pk_comunicationserver PRIMARY KEY (com_server_id));
 
 
rem
rem Table               : system_msg
rem Description         : 
rem system_msg_id       : 
rem type                : 
rem message             : 
rem host                : 
rem app_server          : 
rem processesed         : 
rem
CREATE TABLE system_msg (
    system_msg_id   NUMBER(38) NOT NULL,
    type            VARCHAR2(50),
    message         VARCHAR2(50),
    host            CHAR(50),
    app_server      CHAR(50),
    processesed     CHAR(1),
CONSTRAINT pk_system_msg PRIMARY KEY (system_msg_id));
 
 
rem
rem Table               : analysis_rule
rem Description         : deffinition for a executible system check
rem analysis_rule_id    : 
rem type                : 
rem rule_def            : definition -sql, wmi, perl, etc 
rem error               : error message displayed if rule unexecutible 
rem name                : 
rem sf_error_deff_id    : 
rem active              : 
rem execution_interval  : 
rem description         : 
rem notimeout           : 
rem parent_folder_id    : 
rem
CREATE TABLE analysis_rule (
    analysis_rule_id NUMBER(38) NOT NULL,
    type            CHAR(10),
    rule_def        VARCHAR2(4000),
    error           CHAR(254),
    name            CHAR(100),
    sf_error_deff_id NUMBER(38),
    active          CHAR(1),
    execution_interval VARCHAR2(10),
    description     CHAR(100),
    notimeout       CHAR(1),
    parent_folder_id NUMBER(38),
CONSTRAINT pk_analysis_rule PRIMARY KEY (analysis_rule_id));
 
 
rem
rem Table               : reaction
rem Description         : deffinition for a executible system check
rem reaction_id         : 
rem type                : 
rem rule_def            : definition -sql, wmi, perl, etc 
rem error               : error message displayed if rule unexecutible 
rem name                : 
rem host_specific       : if true, execute reaction on host of error,otherwise central 
rem active              : 
rem sv_name             : 
rem
CREATE TABLE reaction (
    reaction_id     NUMBER(38) NOT NULL,
    type            CHAR(10),
    rule_def        VARCHAR2(2000),
    error           CHAR(100),
    name            CHAR(20),
    host_specific   CHAR(50),
    active          CHAR(1),
    sv_name         CHAR(50),
CONSTRAINT pk_reaction PRIMARY KEY (reaction_id));
 
 
rem
rem Table               : collector
rem Description         : script/sql to collect non internal statistics
rem collector_id        : 
rem type                : 
rem rule_def            : definition -sql, wmi, perl, etc 
rem error               : error message displayed if rule unexecutible 
rem name                : 
rem odbc                : 
rem active              : 
rem sft_elmnt_id        : 
rem host_id             : host a collector is associated with 
rem description         : description of the statistic 
rem execution_interval  : 
rem max_records         : 
rem notimeout           : 
rem parent_sft_elmnt_id : 
rem parent_collector_id : 
rem archive_field       : 
rem archive_interval    : 
rem archive_description : reserved for future use 
rem parent_folder_id    : 
rem monitored_comps_id  : 
rem
CREATE TABLE collector (
    collector_id    NUMBER(38) NOT NULL,
    type            CHAR(10),
    rule_def        VARCHAR2(4000),
    error           VARCHAR2(254),
    name            CHAR(100),
    odbc            CHAR(50),
    active          CHAR(1),
    sft_elmnt_id    VARCHAR2(10),
    host_id         VARCHAR2(10),
    description     CHAR(100),
    execution_interval NUMBER(38),
    max_records     NUMBER(38),
    notimeout       CHAR(1),
    parent_sft_elmnt_id NUMBER(38),
    parent_collector_id NUMBER(38),
    archive_field   CHAR(1),
    archive_interval CHAR(1),
    archive_description CHAR(50),
    parent_folder_id NUMBER(38),
    monitored_comps_id NUMBER(38),
CONSTRAINT pk_collector PRIMARY KEY (collector_id));
 
 
rem
rem Table               : sft_mng_sys
rem Description         : 
rem sft_mng_sys_id      : 
rem name                : 
rem status              : 
rem state               : 
rem type                : 
rem
CREATE TABLE sft_mng_sys (
    sft_mng_sys_id  NUMBER(38) NOT NULL,
    name            CHAR(50),
    status          CHAR(20),
    state           CHAR(20),
    type            VARCHAR2(50),
CONSTRAINT pk_sft_mng_sys PRIMARY KEY (sft_mng_sys_id));
 
 
rem
rem Table               : sft_error_defs
rem Description         : string errors and messages will be configured per component/appserver
rem error_defs_id       : 
rem ev_type             : 
rem ev_level            : 
rem ev_time             : 
rem search_string       : 
rem ev_sub_type         : 
rem host                : 
rem name                : Name of Error Deffinition 
rem sv_name             : 
rem cc_alias            : 
rem sf_elmnt_id         : 
rem active              : 
rem type                : type of error definition 
rem
CREATE TABLE sft_error_defs (
    error_defs_id   NUMBER(38) NOT NULL,
    ev_type         CHAR(50),
    ev_level        CHAR(50),
    ev_time         CHAR(50),
    search_string   CHAR(254),
    ev_sub_type     CHAR(50),
    host            CHAR(254),
    name            CHAR(50),
    sv_name         CHAR(50),
    cc_alias        CHAR(50),
    sf_elmnt_id     CHAR(50),
    active          CHAR(1),
    type            CHAR(10),
CONSTRAINT pk_sft_error_defs PRIMARY KEY (error_defs_id));
 
 
rem
rem Table               : server_task
rem Description         : related to sft_elment (for all tasks per app server) or components and monitored_comps , (all task per component)
rem server_task_id      : 
rem sv_name             : 
rem cc_alias            : 
rem tk_taskid           : 
rem tk_pid              : 
rem tk_disp_runstate    : 
rem cc_runmode          : 
rem tk_start_time       : 
rem tk_end_time         : 
rem tk_status           : 
rem cg_alias            : 
rem sft_elmnt_id        : 
rem sft_elmnt_comp_id   : 
rem tk_parent_t         : 
rem cc_incarn_no        : 
rem tk_label            : 
rem tk_tasktype         : 
rem
CREATE TABLE server_task (
    server_task_id  NUMBER(38) NOT NULL,
    sv_name         CHAR(100),
    cc_alias        CHAR(100),
    tk_taskid       NUMBER(38),
    tk_pid          NUMBER(38),
    tk_disp_runstate CHAR(100),
    cc_runmode      CHAR(100),
    tk_start_time   CHAR(50),
    tk_end_time     CHAR(50),
    tk_status       CHAR(254),
    cg_alias        CHAR(100),
    sft_elmnt_id    NUMBER(38),
    sft_elmnt_comp_id NUMBER(38),
    tk_parent_t     CHAR(50),
    cc_incarn_no    CHAR(50),
    tk_label        CHAR(50),
    tk_tasktype     CHAR(50),
CONSTRAINT pk_server_task PRIMARY KEY (server_task_id));
 
 
rem
rem Table               : monitored_comps
rem Description         : represents all components per app server being monitored
rem monitored_comps_id  : 
rem sv_name             : 
rem cp_max_mts          : 
rem cc_name             : use this key to show running components per component deff 
rem ct_alias            : 
rem cg_name             : 
rem cc_runmode          : 
rem cp_disp_run_state   : 
rem cp_num_run          : 
rem cp_max_tas          : 
rem cp_actv_mt          : 
rem cc_alias            : 
rem cp_start_time       : 
rem cp_end_time         : 
rem cp_status           : 
rem sft_elmnt_id        : 
rem sft_elmnt_comp_id   : 
rem cp_startmode        : 
rem
CREATE TABLE monitored_comps (
    monitored_comps_id NUMBER(38) NOT NULL,
    sv_name         CHAR(50),
    cp_max_mts      VARCHAR2(10),
    cc_name         CHAR(100),
    ct_alias        CHAR(100),
    cg_name         CHAR(50),
    cc_runmode      CHAR(50),
    cp_disp_run_state CHAR(50),
    cp_num_run      VARCHAR2(10),
    cp_max_tas      VARCHAR2(10),
    cp_actv_mt      VARCHAR2(10),
    cc_alias        CHAR(50),
    cp_start_time   CHAR(50),
    cp_end_time     CHAR(50),
    cp_status       CHAR(50),
    sft_elmnt_id    NUMBER(38),
    sft_elmnt_comp_id CHAR(50),
    cp_startmode    CHAR(50),
CONSTRAINT pk_monitored_comps PRIMARY KEY (monitored_comps_id));
 
 
rem
rem Table               : processes
rem Description         : related to the app server via sft_enlmnt_id, aslo to component or task via cc_name or ct_name,respectively
rem process_id          : 
rem sv_name             : 
rem task_id             : 
rem pid                 : 
rem cc_alias            : 
rem cc_name             : 
rem host                : 
rem state               : 
rem process             : 
rem cpu                 : 
rem cpu_time            : 
rem memory              : 
rem pagefaults          : 
rem virtualmem          : 
rem priority            : 
rem threads             : 
rem sft_elmnt_id        : 
rem sft_elmnt_comp_id   : 
rem kernel_time         : 
rem user_time           : 
rem
CREATE TABLE processes (
    process_id      NUMBER(38) NOT NULL,
    sv_name         CHAR(50),
    task_id         CHAR(10),
    pid             VARCHAR2(10),
    cc_alias        CHAR(50),
    cc_name         CHAR(100),
    host            CHAR(50),
    state           CHAR(50),
    process         CHAR(50),
    cpu             FLOAT,
    cpu_time        VARCHAR2(10),
    memory          NUMBER(38),
    pagefaults      NUMBER(38),
    virtualmem      NUMBER(38),
    priority        CHAR(50),
    threads         VARCHAR2(10),
    sft_elmnt_id    VARCHAR2(10),
    sft_elmnt_comp_id VARCHAR2(10),
    kernel_time     VARCHAR2(10),
    user_time       VARCHAR2(10),
CONSTRAINT pk_processes PRIMARY KEY (process_id));
 
 
rem
rem Table               : components
rem Description         : will contain all Siebel default components, plus user definable components
rem components_id       : 
rem description         : 
rem log_analyze         : 
rem log_monitor         : 
rem sft_elmnt_id        : 
rem cc_alias            : 
rem
CREATE TABLE components (
    components_id   NUMBER(38) NOT NULL,
    description     CHAR(100),
    log_analyze     CHAR(1),
    log_monitor     CHAR(1),
    sft_elmnt_id    NUMBER(38),
    cc_alias        CHAR(80) NOT NULL,
CONSTRAINT pk_components PRIMARY KEY (components_id));
 
 
rem
rem Table               : analysis_err
rem Description         : (reserved for future use) If the anlaysis object returns false, the error defined here will be inserted into error event table
rem analysis_err_id     : 
rem evt_type            : 
rem evt_event_sub_type  : 
rem evt_event_level     : 
rem evt_event_time      : 
rem evt_event_string    : 
rem evt_status          : 
rem evt_cc_alias        : 
rem evt_sv_name         : 
rem evt_sft_elmnt_id    : 
rem evt_host            : 
rem name                : 
rem
CREATE TABLE analysis_err (
    analysis_err_id NUMBER(38) NOT NULL,
    evt_type        CHAR(10),
    evt_event_sub_type CHAR(50),
    evt_event_level NUMBER(38),
    evt_event_time  CHAR(50),
    evt_event_string CHAR(254),
    evt_status      CHAR(50),
    evt_cc_alias    CHAR(50),
    evt_sv_name     CHAR(50),
    evt_sft_elmnt_id NUMBER(38),
    evt_host        CHAR(254),
    name            CHAR(50),
CONSTRAINT pk_analysis_err PRIMARY KEY (analysis_err_id));
 
 
rem
rem Table               : tableids
rem Description         : 
rem table_name          : 
rem id                  : 
rem
CREATE TABLE tableids (
    table_name      CHAR(50) NOT NULL,
    id              NUMBER(38) NOT NULL,
CONSTRAINT pk_tableids PRIMARY KEY (table_name));
 
 
rem
rem Table               : data_source
rem Description         : 
rem data_source_id      : 
rem name                : 
rem username            : 
rem password            : 
rem host                : 
rem alias               : alias name for ODBC 
rem
CREATE TABLE data_source (
    data_source_id  NUMBER(38) NOT NULL,
    name            CHAR(50),
    username        CHAR(50),
    password        CHAR(50),
    host            CHAR(50),
    alias           CHAR(50) NOT NULL,
CONSTRAINT pk_data_source PRIMARY KEY (data_source_id, alias));
 
 
rem
rem Table               : resonate_ar
rem Description         : Resonate table for Agent Rules
rem resonate_id         : 
rem sft_elmnt_id        : join to parent sft_elment 
rem service             : object manager - such as eaiobjmgr 
rem service_host        : usually an IP address 
rem type                : 
rem rule_number         : list the number of rules for service host combo 
rem
CREATE TABLE resonate_ar (
    resonate_id     NUMBER(38) NOT NULL,
    sft_elmnt_id    NUMBER(38),
    service         CHAR(50),
    service_host    CHAR(50),
    type            CHAR(50),
    rule_number     NUMBER(38),
CONSTRAINT pk_resonate_ar PRIMARY KEY (resonate_id));
 
 
rem
rem Table               : sessions
rem Description         : 
rem sessions_id         : 
rem sv_name             : 
rem cc_alias            : 
rem cg_alias            : 
rem tk_taskid           : 
rem tk_pid              : 
rem tk_disp_runstate    : 
rem tk_idle_state       : 
rem tk_ping_tim         : 
rem tk_hung_state       : 
rem om_login            : 
rem om_bussvc           : 
rem om_view             : 
rem om_applet           : 
rem om_buscomp          : 
rem sft_elmnt_id        : 
rem
CREATE TABLE sessions (
    sessions_id     NUMBER(38) NOT NULL,
    sv_name         CHAR(50),
    cc_alias        CHAR(100),
    cg_alias        CHAR(100),
    tk_taskid       NUMBER(38),
    tk_pid          NUMBER(38),
    tk_disp_runstate CHAR(20),
    tk_idle_state   CHAR(20),
    tk_ping_tim     CHAR(20),
    tk_hung_state   CHAR(20),
    om_login        CHAR(30),
    om_bussvc       CHAR(100),
    om_view         CHAR(100),
    om_applet       CHAR(100),
    om_buscomp      CHAR(100),
    sft_elmnt_id    NUMBER(38),
CONSTRAINT pk_sessions PRIMARY KEY (sessions_id));
 
 
rem
rem Table               : folders
rem Description         : 
rem folder_id           : 
rem fl_name             : 
rem parent_id           : 
rem fl_type             : 
rem
CREATE TABLE folders (
    folder_id       NUMBER(38) NOT NULL,
    fl_name         VARCHAR2(254) NOT NULL,
    parent_id       NUMBER(38) NOT NULL,
    fl_type         NUMBER(38) NOT NULL,
CONSTRAINT pk_folders PRIMARY KEY (folder_id));
 
 
rem
rem Table               : administrators
rem Description         : persons with email address 
rem administrators_id   : 
rem first_name          : 
rem last_name           : 
rem password            : 
rem email               : 
rem phone               : 
rem pager               : 
rem default_admin       : 
rem user_name           : 
rem schedule_id         : (Foreign Key
rem                        references SCHEDULE.schedule_id)
rem
CREATE TABLE administrators (
    administrators_id NUMBER(38) NOT NULL,
    first_name      CHAR(50),
    last_name       CHAR(50),
    password        CHAR(50),
    email           CHAR(70),
    phone           CHAR(50),
    pager           CHAR(50),
    default_admin   CHAR(1),
    user_name       CHAR(50),
    schedule_id     NUMBER(38),
CONSTRAINT pk_administrators PRIMARY KEY (administrators_id),
CONSTRAINT fk_administrators FOREIGN KEY (schedule_id)
    REFERENCES schedule (schedule_id));
 
 
rem
rem Table               : errorexceptions
rem Description         : ignore errors based on time/date or string
rem errorexceptions_id  : 
rem errorexception      : 
rem time_exemption      : ignore errors before this date 
rem err_type_exept      : 
rem note_rule_id        : shorted to avaoid trucation (Foreign Key
rem                        references NOTIFICATION_RULE.note_rule_id)
rem
CREATE TABLE errorexceptions (
    errorexceptions_id CHAR(10) NOT NULL,
    errorexception  CHAR(254),
    time_exemption  DATE,
    err_type_exept  CHAR(10),
    note_rule_id    NUMBER(38),
CONSTRAINT pk_errorexceptions PRIMARY KEY (errorexceptions_id),
CONSTRAINT fk_errorexceptions FOREIGN KEY (note_rule_id)
    REFERENCES notification_rule (note_rule_id));
 
 
rem
rem Table               : host_os_stats
rem Description         : machine specific info
rem db_id               : 
rem running_since       : 
rem status              : 
rem memory_consuption   : 
rem cpu_utilization     : 
rem time_stamp          : 
rem host_id             : (Foreign Key
rem                        references HOST.host_id)
rem
CREATE TABLE host_os_stats (
    db_id           CHAR(10) NOT NULL,
    running_since   DATE,
    status          CHAR(10),
    memory_consuption CHAR(50),
    cpu_utilization CHAR(50),
    time_stamp      DATE,
    host_id         NUMBER(38),
CONSTRAINT pk_host_os_stats PRIMARY KEY (db_id),
CONSTRAINT fk_host_os_stats FOREIGN KEY (host_id)
    REFERENCES host (host_id));
 
 
rem
rem Table               : com_admin
rem Description         : 
rem com_server_id       : truncated from comunicationserver_id (Foreign Key
rem                        references COMUNICATIONSERVER.com_server_id)
rem administrators_id   : (Foreign Key
rem                        references ADMINISTRATORS.administrators_id)
rem
CREATE TABLE com_admin (
    com_server_id   NUMBER(38) NOT NULL,
    administrators_id NUMBER(38) NOT NULL,
CONSTRAINT pk_com_admin PRIMARY KEY (com_server_id, administrators_id),
CONSTRAINT fk_com_admin1 FOREIGN KEY (com_server_id)
    REFERENCES comunicationserver (com_server_id)
    ON DELETE CASCADE,
CONSTRAINT fk_com_admin2 FOREIGN KEY (administrators_id)
    REFERENCES administrators (administrators_id));
 
 
rem
rem Table               : stat_vals
rem Description         : values populated as result of stat_defs
rem stat_vals_id        : 
rem val                 : 
rem time_stmp           : 
rem collector_id        : (Foreign Key
rem                        references COLLECTOR.collector_id)
rem
CREATE TABLE stat_vals (
    stat_vals_id    NUMBER(38) NOT NULL,
    val             FLOAT NOT NULL,
    time_stmp       DATE NOT NULL,
    collector_id    NUMBER(38),
CONSTRAINT pk_stat_vals PRIMARY KEY (stat_vals_id),
CONSTRAINT fk_stat_vals FOREIGN KEY (collector_id)
    REFERENCES collector (collector_id));
 
 
rem
rem Table               : sft_elmnt
rem Description         : 
rem sft_elmnt_id        : 
rem type                : 
rem description         : 
rem name                : 
rem os                  : 
rem host                : 
rem installdir          : 
rem status              : 
rem exe                 : 
rem service_name        : 
rem parent_elmnt_id     : 
rem logdir              : 
rem monitor_service     : 
rem restart_service     : 
rem send_event          : send event on service failure 
rem port                : 
rem mon_interval        : 
rem sft_mng_sys_id      : (Foreign Key
rem                        references SFT_MNG_SYS.sft_mng_sys_id)
rem
CREATE TABLE sft_elmnt (
    sft_elmnt_id    NUMBER(38) NOT NULL,
    type            CHAR(20),
    description     CHAR(50),
    name            CHAR(50),
    os              CHAR(20),
    host            CHAR(50),
    installdir      CHAR(254),
    status          CHAR(20),
    exe             CHAR(50),
    service_name    CHAR(50),
    parent_elmnt_id NUMBER(38),
    logdir          CHAR(254),
    monitor_service CHAR(1),
    restart_service CHAR(1),
    send_event      CHAR(1),
    port            NUMBER(38),
    mon_interval    NUMBER(38),
    sft_mng_sys_id  NUMBER(38),
CONSTRAINT pk_sft_elmnt PRIMARY KEY (sft_elmnt_id),
CONSTRAINT fk_sft_elmnt FOREIGN KEY (sft_mng_sys_id)
    REFERENCES sft_mng_sys (sft_mng_sys_id));
 
 
rem
rem Table               : sft_elmnt_comp
rem Description         : key value description of component
rem sft_elmnt_comp_id   : 
rem type                : 
rem elmnt_key           : 
rem elmnt_value         : 
rem status              : 
rem sft_elmnt_id        : (Foreign Key
rem                        references SFT_ELMNT.sft_elmnt_id)
rem
CREATE TABLE sft_elmnt_comp (
    sft_elmnt_comp_id NUMBER(38) NOT NULL,
    type            CHAR(20),
    elmnt_key       CHAR(50) NOT NULL,
    elmnt_value     CHAR(254) NOT NULL,
    status          CHAR(20),
    sft_elmnt_id    NUMBER(38),
CONSTRAINT pk_sft_elmnt_comp PRIMARY KEY (sft_elmnt_comp_id),
CONSTRAINT fk_sft_elmnt_comp FOREIGN KEY (sft_elmnt_id)
    REFERENCES sft_elmnt (sft_elmnt_id));
 
 
rem
rem Table               : comp_errdef
rem Description         : 
rem components_id       : (Foreign Key
rem                        references COMPONENTS.components_id)
rem error_defs_id       : (Foreign Key
rem                        references SFT_ERROR_DEFS.error_defs_id)
rem
CREATE TABLE comp_errdef (
    components_id   NUMBER(38) NOT NULL,
    error_defs_id   NUMBER(38) NOT NULL,
CONSTRAINT pk_comp_errdef PRIMARY KEY (components_id, error_defs_id),
CONSTRAINT fk_comp_errdef1 FOREIGN KEY (components_id)
    REFERENCES components (components_id)
    ON DELETE CASCADE,
CONSTRAINT fk_comp_errdef2 FOREIGN KEY (error_defs_id)
    REFERENCES sft_error_defs (error_defs_id)
    ON DELETE CASCADE);
 
 
rem
rem Table               : com_srvr_vals
rem Description         : key value description of component
rem com_srvr_vals_id    : 
rem type                : 
rem elmnt_key           : 
rem elmnt_value         : 
rem status              : 
rem com_server_id       : truncated from comunicationserver_id (Foreign Key
rem                        references COMUNICATIONSERVER.com_server_id)
rem
CREATE TABLE com_srvr_vals (
    com_srvr_vals_id NUMBER(38) NOT NULL,
    type            CHAR(20),
    elmnt_key       CHAR(50) NOT NULL,
    elmnt_value     CHAR(254) NOT NULL,
    status          CHAR(20),
    com_server_id   NUMBER(38),
CONSTRAINT pk_com_srvr_vals PRIMARY KEY (com_srvr_vals_id),
CONSTRAINT fk_com_srvr_vals FOREIGN KEY (com_server_id)
    REFERENCES comunicationserver (com_server_id));
 
 
rem
rem Table               : notification_reaction
rem Description         : 
rem note_rule_id        : shorted to avaoid trucation (Foreign Key
rem                        references NOTIFICATION_RULE.note_rule_id)
rem reaction_id         : (Foreign Key
rem                        references REACTION.reaction_id)
rem
CREATE TABLE notification_reaction (
    note_rule_id    NUMBER(38) NOT NULL,
    reaction_id     NUMBER(38) NOT NULL,
CONSTRAINT pk_notification_reaction PRIMARY KEY (note_rule_id, reaction_id),
CONSTRAINT fk_notification_reaction1 FOREIGN KEY (note_rule_id)
    REFERENCES notification_rule (note_rule_id)
    ON DELETE CASCADE,
CONSTRAINT fk_notification_reaction2 FOREIGN KEY (reaction_id)
    REFERENCES reaction (reaction_id));
 
 
rem
rem Table               : analysis_errdef
rem Description         : 
rem analysis_rule_id    : (Foreign Key
rem                        references ANALYSIS_RULE.analysis_rule_id)
rem error_defs_id       : (Foreign Key
rem                        references SFT_ERROR_DEFS.error_defs_id)
rem
CREATE TABLE analysis_errdef (
    analysis_rule_id NUMBER(38) NOT NULL,
    error_defs_id   NUMBER(38) NOT NULL,
CONSTRAINT pk_analysis_errdef PRIMARY KEY (analysis_rule_id, error_defs_id),
CONSTRAINT fk_analysis_errdef1 FOREIGN KEY (analysis_rule_id)
    REFERENCES analysis_rule (analysis_rule_id)
    ON DELETE CASCADE,
CONSTRAINT fk_analysis_errdef2 FOREIGN KEY (error_defs_id)
    REFERENCES sft_error_defs (error_defs_id)
    ON DELETE CASCADE);
 
 
rem
rem Table               : sft_err_deff
rem Description         : 
rem sft_elmnt_id        : (Foreign Key
rem                        references SFT_ELMNT.sft_elmnt_id)
rem error_defs_id       : (Foreign Key
rem                        references SFT_ERROR_DEFS.error_defs_id)
rem
CREATE TABLE sft_err_deff (
    sft_elmnt_id    NUMBER(38) NOT NULL,
    error_defs_id   NUMBER(38) NOT NULL,
CONSTRAINT pk_sft_err_deff PRIMARY KEY (sft_elmnt_id, error_defs_id),
CONSTRAINT fk_sft_err_deff1 FOREIGN KEY (sft_elmnt_id)
    REFERENCES sft_elmnt (sft_elmnt_id)
    ON DELETE CASCADE,
CONSTRAINT fk_sft_err_deff2 FOREIGN KEY (error_defs_id)
    REFERENCES sft_error_defs (error_defs_id)
    ON DELETE CASCADE);
 
