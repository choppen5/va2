VERSION 5.00
Begin VB.PropertyPage ppgHost 
   Caption         =   "Host"
   ClientHeight    =   2460
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   4845
   PaletteMode     =   0  'Halftone
   ScaleHeight     =   2460
   ScaleWidth      =   4845
   Begin VB.TextBox txtIP 
      Height          =   285
      Left            =   1680
      TabIndex        =   3
      Top             =   600
      Width           =   2655
   End
   Begin VB.CheckBox dont_ping 
      Alignment       =   1  'Right Justify
      Caption         =   "No Ping"
      Height          =   495
      Left            =   120
      TabIndex        =   4
      Top             =   1080
      Width           =   1815
   End
   Begin VB.CommandButton cmdgetip 
      Caption         =   "IP Address"
      Enabled         =   0   'False
      Height          =   255
      Left            =   960
      TabIndex        =   5
      Top             =   2160
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtHost 
      Height          =   285
      Left            =   1680
      MaxLength       =   50
      TabIndex        =   1
      Top             =   120
      Width           =   2655
   End
   Begin VB.Label Label2 
      Caption         =   "IP Address"
      Height          =   375
      Left            =   120
      TabIndex        =   2
      Top             =   600
      Width           =   1335
   End
   Begin VB.Label Label1 
      Caption         =   "Host Name"
      Height          =   255
      Left            =   120
      TabIndex        =   0
      Top             =   120
      Width           =   1215
   End
End
Attribute VB_Name = "ppgHost"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit
Implements IMMCPropertyPage
Dim action As String
Dim pid



Private m_ScopeItem As ScopeItem

Private m_bolChangesApplied As Boolean

Private Sub cmdgetip_Click()

'    Dim lngRetVal      As Long
'    Dim strErrorMsg    As String
'    Dim udtWinsockData As WSADataType
'    Dim lngType        As Long
'    Dim lngProtocol    As Long
'    '
'    'start up winsock service
'    lngRetVal = WSAStartup(&H101, udtWinsockData)
'
' Dim lngPtrToHOSTENT As Long
'    '
'    'structure which stores all the host info
'    Dim udtHostent_mod      As HostEnt
'    '
'    'pointer to the IP address' list
'    Dim lngPtrToIP      As Long
'    '
'    'byte array that contains elemets of an IP address
'    Dim arrIpAddress()  As Byte
'    '
'    'result IP address string to add into the ListBox
'    Dim strIpAddress    As String
'    '
'    '----------------------------------------------------
'    '
'    'Clear the ListBox control
'    '
'    'Call the gethostbyname Winsock API function
'    'to get pointer to the HOSTENT structure
'    lngPtrToHOSTENT = gethostbyname(Trim$(PropertyPage.txtHost.Text))
'    '
'    'Check the lngPtrToHOSTENT value
'    If lngPtrToHOSTENT = 0 Then
'        '
'        'If the gethostbyname function has returned 0
'        'the function execution is failed. To get
'        'error description call the ShowErrorMsg
'        'subroutine
'        '
'        ShowErrorMsg (Err.LastDllError)
'        '
'    Else
'        '
'        'The gethostbyname function has found the address
'        '
'        'Copy retrieved data to udtHostent structure
'        RtlMoveMemory udtHostent, lngPtrToHOSTENT, LenB(udtHostent)
'        '
'        'Now udtHostent.hAddrList member contains
'        'an array of IP addresses
'        '
'        'Get a pointer to the first address
'        RtlMoveMemory lngPtrToIP, udtHostent_mod.hAddrList, 4
'        '
'        Do Until lngPtrToIP = 0
'            '
'            'Prepare the array to receive IP address values
'            ReDim arrIpAddress(1 To udtHostent.hLength)
'            '
'            'move IP address values to the array
'            RtlMoveMemory arrIpAddress(1), lngPtrToIP, udtHostent.hLength
'            '
'            'build string with IP address
'            For i = 1 To udtHostent.hLength
'                strIpAddress = strIpAddress & arrIpAddress(i) & "."
'            Next
'            '
'            'remove the last dot symbol
'            strIpAddress = Left$(strIpAddress, Len(strIpAddress) - 1)
'            '
'            'Add IP address to the listbox
'            PropertyPage.txtIPAddress = strIpAddress
'            '
'            'Clear the buffer
'            strIpAddress = ""
'            '
'            'Get pointer to the next address
'            udtHostent.hAddrList = udtHostent.hAddrList + LenB(udtHostent.hAddrList)
'            RtlMoveMemory lngPtrToIP, udtHostent.hAddrList, 4
'            '
'         Loop
'        '
'    End If



End Sub

Private Sub IMMCPropertyPage_Cancel()

End Sub

Private Sub IMMCPropertyPage_Close()

End Sub

Private Sub IMMCPropertyPage_GetDialogUnitSize(Height As Variant, Width As Variant)

End Sub

Private Sub IMMCPropertyPage_Help()

End Sub

Private Sub IMMCPropertyPage_Initialize(ByVal Data As Variant, ByVal PropertySheet As SnapInLib.MMCPropertySheet)
Dim dataset As adodb.Recordset
Dim initdata As Variant
Dim dobj As New vaDataAccess


initdata = Split(Data, "~")
action = initdata(0)
pid = initdata(1)


If action = "ACTION_EDIT" Or action = "ACTION_DELETE" Then

    Set dataset = dobj.returndataset("select * from host where host_id = " & pid)

    With PropertyPage
        .txthost = Trim(dataset("hostname").value) & ""
        translatecheck .dont_ping, dataset("no_ping").value
        .txtIP = Trim(dataset("ipaddress").value) & ""
    End With

End If

End Sub

Private Sub IMMCPropertyPage_QueryCancel(Allow As Boolean)

End Sub

Private Sub PropertyPage_ApplyChanges()
'Dim newhost As adodb.Recordset
Dim dobj As vaDataAccess

Set dobj = New vaDataAccess

    If (m_bolChangesApplied = True) Then
        'this event is firing twice on OK click???
        Exit Sub
    End If


Select Case action
    Case "ACTION_ADD"
        With PropertyPage
            Call dobj.addhost(.txthost.Text, checktovalue(.dont_ping))
        End With
     
     Case "ACTION_DELETE"
        With PropertyPage
            Call dobj.returndataset("delete from host where host_id = " & pid)
            GoTo cleanup
        End With
    
    Case "ACTION_EDIT"
        With PropertyPage
            Call dobj.returndataset("update host set hostname = '" & .txthost.Text _
            & "', no_ping = '" & checktovalue(.dont_ping) & "', ipaddress = '" & Trim(txtIP.Text) & "' where host_id = " & pid)
        End With
End Select

cleanup:
m_bolChangesApplied = True
With PropertyPage
    Call m_ScopeItem.PropertyChanged(.txthost.Text & "~!~" & .dont_ping.value)
End With

'Set newhost = Nothing
Set dobj = Nothing
        
End Sub

Private Function check_required(username As String, password As String) As Boolean

If username <> "" And password <> "" Then check_required = True


End Function


Private Sub PropertyPage_SelectionChanged()
Set m_ScopeItem = SelectedControls(0)
End Sub

Private Sub ShowErrorMsg(lngError As Long)
    '
    Dim strMessage As String
    '
    Select Case lngError
        Case WSANOTINITIALISED
            strMessage = "A successful WSAStartup call must occur " & _
                         "before using this function."
        Case WSAENETDOWN
            strMessage = "The network subsystem has failed."
        Case WSAHOST_NOT_FOUND
            strMessage = "Authoritative answer host not found."
        Case WSATRY_AGAIN
            strMessage = "Nonauthoritative host not found, or server failure."
        Case WSANO_RECOVERY
            strMessage = "A nonrecoverable error occurred."
        Case WSANO_DATA
            strMessage = "Valid name, no data record of requested type."
        Case WSAEINPROGRESS
            strMessage = "A blocking Windows Sockets 1.1 call is in " & _
                         "progress, or the service provider is still " & _
                         "processing a callback function."
        Case WSAEFAULT
            strMessage = "The name parameter is not a valid part of " & _
                         "the user address space."
        Case WSAEINTR
            strMessage = "A blocking Windows Socket 1.1 call was " & _
                         "canceled through WSACancelBlockingCall."
    End Select
   'PropertyPage.txtIPAddress.Text = strMessage
    '
End Sub
Private Sub translatecheck(checkbox As checkbox, value)

    If IsNull(value) Then
        Debug.Print "null host"
        checkbox.value = 0
    ElseIf (value = "Y") Then
        Debug.Print "true"
        checkbox.value = 1
    End If
End Sub

Private Function checktovalue(checkbox As checkbox) As String

    If checkbox.value = 1 Then
        checktovalue = "Y"
    Else
        checktovalue = "N"
    End If
    
End Function


